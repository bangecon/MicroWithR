---
title: "1.4 Rational Consumer Choice"
author: Jim Bang
output: 
  learnr::tutorial:
    progressive: true
runtime: shiny_prerendered
---

```{r setup, include = FALSE}
library(learnr)
library(gradethis)
library(Ryacas)
library(Deriv)
library(Rsolnp)
gradethis_setup()
tutorial_options(exercise.eval = TRUE, exercise.reveal_solution = TRUE)
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", fig.height = 6, fig.width = 6)
knitr::include_graphics
ux <- function(x) - x[1] ^ (alpha) * x[2] ^ (1 - alpha)
bc <- function(x) p1 * x[1] + p2 * x[2]
alpha = 0.25; p1 = 1.5; p2 = 1; m = 100
equilibrium <- solnp(c(0.01, 0.01), ux, LB = c(0, 0), UB = c(Inf, Inf), 
                     ineqfun = bc, ineqLB = 0, ineqUB = m)
par(mar = c(5, 4, 1, 1))
L <- ysym('x1^(0.25) * x2^(0.75) + lambda*(100 - 1.5*x1 - x2)')
dL <- c(deriv(L, 'x1'), deriv(L, 'x2'), deriv(L, 'lambda'))
MU1 <- solve(dL[[1]], 'lambda') |> y_rmvars()*p1 
MU1 <- yac_str(MU1) |> Simplify() |> ysym()
MU2 <- solve(dL[[2]], 'lambda') |> y_rmvars()*p2 
MU2 <- yac_str(MU2) |> Simplify() |> ysym()
MRS <- MU1/MU2 
MRSsolve1 <- solve(MRS - p1/p2, 'x2') |> y_rmvars()
BCsolve1 <- solve(dL[[3]], 'x2') |> y_rmvars()
x1star <- solve(MRSsolve1 - BCsolve1, 'x1') |> y_rmvars() |> yac_expr() |> eval()
MRSsolve2 <- solve(MRS - p1/p2, 'x1') |> y_rmvars()
BCsolve2 <- solve(dL[[3]], 'x1') |> y_rmvars()
x2star <- solve(MRSsolve2 - BCsolve2, 'x2') |> y_rmvars() |> yac_expr() |> eval()
lambda <- parse(text = gsub('x2', x2star, gsub('x1', x1star, MU1/p1))) |> eval()
```

## Rational Choice

### Overview

A *rational* consumer chooses the *most preferred* bundle that lies within their *budget constraint*. 

When we represent preferences with a *utility function*, that bundle *maximizes utility* subject to the budget constraint. 

Solution methods: 

1. Graphical
2. Analytical
3. Computational

### Example 

The following example solves the utility maximization problem involving a two-good Cobb-Douglass utility function with $\alpha = 0.25$, $p_1 = 1.5$, $p_2 = 1$, and $m = 100$.  

$$\max_x \bigg\{ U(x_1, x_2) = x_1^{0.25}x_2^{0.75} \bigg\}$$
$$\text{s.t.: }1.5x_1+x_2 \le 100$$

## Graphical Solution

The graphical solution shows the intuition for the equilibrium, which is: 

1. The *consumer's* willingness to trade off $x_1$ and $x_2$ (the MRS, or slope of the indifference curve) equals the *market's* willingness to trade off $x_1$ and $x_2$ (the relative price of good 1 to good 2, or the slope of the budget line); 
$$\frac{MU_1}{MU_2}=\frac{p_1}{p_2}$$
2. The consumer exactly spends their budgeted income. 
$$p_1x_1 + p_2x_2 = m$$
<details style="line-height:105%"><summary>Click here to view the code for the graph.</summary>
`u <- function(x) { x[1] ^ (alpha) * x[2] ^ (1 - alpha)}`<br>
`alpha = 0.25`<br>
`p1 = 1.5`<br>
`p2 = 1`<br>
`m = 100`<br>
`equilibrium <- constrOptim(`<br>
&nbsp;&nbsp;`c(0.01, 0.01),`<br>
&nbsp;&nbsp;`u,`<br>
&nbsp;&nbsp;`NULL,`<br>
&nbsp;&nbsp;`ui = c(-p1, -p2),`<br>
&nbsp;&nbsp;`ci = c(-m),`<br>
&nbsp;&nbsp;`control = list(fnscale = -1))`<br>
`equilibrium$lambda <-`<br>
&nbsp;&nbsp;`alpha * equilibrium$par[1] ^ (alpha - 1) * equilibrium$par[2] ^ (1 - alpha) / p1`<br>
`curve(`<br>
&nbsp;&nbsp;`equilibrium$value^(1 / (1 - alpha)) / (x^(alpha / (1 - alpha))),`<br>
&nbsp;&nbsp;`0, m / p1,`<br>
&nbsp;&nbsp;`xlab = expression(x[1]),`<br>
&nbsp;&nbsp;`ylab = expression(x[2]),`<br>
&nbsp;&nbsp;`xlim = c(0, m / p1),`<br>
&nbsp;&nbsp;`ylim = c(0, m / p2),`<br>
&nbsp;&nbsp;`col = 'dark green')`<br>
`abline(m / p2,-p1 / p2, col = 'red')`<br>
`points(equilibrium$par[1], equilibrium$par[2], col = 'blue', pch = 20)`<br>
`curve(`<br>
&nbsp;&nbsp;`(1.1*equilibrium$value)^(1 / (1 - alpha)) / (x^(alpha / (1 - alpha))),`<br>
&nbsp;&nbsp;`0, m / p1,`<br>
&nbsp;&nbsp;`xlab = expression(x[1]),`<br>
&nbsp;&nbsp;`ylab = expression(x[2]),`<br>
&nbsp;&nbsp;`xlim = c(0, m / p1),`<br>
&nbsp;&nbsp;`ylim = c(0, m / p2),`<br>
&nbsp;&nbsp;`col = 'dark green',`<br>
&nbsp;&nbsp;`add = TRUE,`<br>
&nbsp;&nbsp;`lty = 'dashed')`<br>
`curve(`<br>
&nbsp;&nbsp;`(0.9*equilibrium$value)^(1 / (1 - alpha)) / (x^(alpha / (1 - alpha))),`<br>
&nbsp;&nbsp;`0, m / p1,`<br>
&nbsp;&nbsp;`xlab = expression(x[1]),`<br>
&nbsp;&nbsp;`ylab = expression(x[2]),`<br>
&nbsp;&nbsp;`xlim = c(0, m / p1),`<br>
&nbsp;&nbsp;`ylim = c(0, m / p2),`<br>
&nbsp;&nbsp;`col = 'dark green',`<br>
&nbsp;&nbsp;`add = TRUE,`<br>
&nbsp;&nbsp;`lty = 'dashed')`<br>
`text(equilibrium$par[1] + 4, equilibrium$par[2] + 4,`<br>
&nbsp;&nbsp;`paste0('x = (', round(equilibrium$par[1], 2), ', ',`<br>
&nbsp;&nbsp;&nbsp;&nbsp;`round(equilibrium$par[2], 2), ')\nu(x) = ', round(equilibrium$value, 2)))`<br>
`text(50, (1.1*equilibrium$value)^(1 / (1 - alpha)) / (50^(alpha / (1 - alpha))) + 3,`
&nbsp;&nbsp;`paste0('u(x) = ', round(1.1*equilibrium$value, 2))) `
`text(50, (0.9*equilibrium$value)^(1 / (1 - alpha)) / (50^(alpha / (1 - alpha))) + 3,`
&nbsp;&nbsp;`paste0('u(x) = ', round(0.9*equilibrium$value, 2))) `
</details>

```{r, fig.width=6, fig.height=8, fig.align='center', out.width = '75%'}
ux <- function(x) {
  -x[1] ^ (alpha) * x[2] ^ (1 - alpha)
}
bc <- function(x) {
  p1 * x[1] + p2 * x[2]
}
alpha = 0.25
p1 = 1.5
p2 = 1
m = 100
equilibrium <- solnp(
  c(0.01, 0.01),
  ux,
  ineqfun = bc,
  ineqLB = 0,
  ineqUB = m,
  LB = c(0, 0),
  UB = c(Inf, Inf), 
  control = list(trace = 0)
)
curve(
  (-tail(equilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
  0,
  m / p1,
  xlab = expression(x[1]),
  ylab = expression(x[2]),
  xlim = c(0, m / p1),
  ylim = c(0, m / p2),
  col = 'darkgreen'
)
abline(m / p2, -p1 / p2,
       col = 'red')
points(equilibrium$pars[1],
       equilibrium$pars[2],
       col = 'blue',
       pch = 20)
curve(
  (1.1 * -tail(equilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
  0,
  m / p1,
  xlab = expression(x[1]),
  ylab = expression(x[2]),
  xlim = c(0, m / p1),
  ylim = c(0, m / p2),
  col = 'darkgreen',
  add = TRUE,
  lty = 'dashed'
)
curve(
  (0.9 * -tail(equilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
  0,
  m / p1,
  xlab = expression(x[1]),
  ylab = expression(x[2]),
  xlim = c(0, m / p1),
  ylim = c(0, m / p2),
  col = 'darkgreen',
  add = TRUE,
  lty = 'dashed'
)
text(
  equilibrium$pars[1] + 4,
  equilibrium$pars[2] + 4,
  paste0(
    'x = (',
    round(equilibrium$pars[1], 2),
    ', ',
    round(equilibrium$pars[2], 2),
    ')\nu(x) = ',
    round(-tail(equilibrium$values, 1), 2)
  )
)
text(50,
     (1.1 * -tail(equilibrium$values, 1)) ^ (1 / (1 - alpha)) / (50 ^ (alpha / (1 - alpha))) + 3,
     paste0('u(x) = ',
            round(1.1 * -tail(equilibrium$values, 1), 2)))
text(50,
     (0.9 * -tail(equilibrium$values, 1)) ^ (1 / (1 - alpha)) / (50 ^ (alpha / (1 - alpha))) + 3,
     paste0('u(x) = ',
            round(0.9 * -tail(equilibrium$values, 1), 2))) 
```

## Analytical Solution - Setup

### Five Key Steps

1. Rearrange the constraint to be something equal to *zero* when it binds. 
2. Define the Lagrangean: add $\lambda \cdot [constraint]$ to the objective function (remember, it's zero when it binds, so you're not really adding anything!).
3. Take derivatives with respect to the choice variables ($x_1$ and $x_2$) *and* $\lambda$. 
4. Set the derivatives equal to zero. 
5. Solve the system of equations for $x_1$, $x_2$ and $\lambda$. 

The "Lagrangian" function for our example is: 

$$\mathcal{L} = x_1^{0.25}x_2^{0.75} + \lambda (100 - 1.5x_1 - x_2)$$

For the constrained optimization problem given above, use the `deriv` function to:

1. Define a yac_symbol object for the Lagrangian;
2. Find the derivatives with respect to $x_1$, $x_2$, and $\lambda$;

Wrap the function obtaining the derivatives in "()" so that it displays in the output. 

```{r foc, exercise = TRUE, exercise.reveal_solution = TRUE}

```

```{r foc-solution}
L <- ysym('x1^(0.25) * x2^(0.75) + lambda*(100 - 1.5*x1 - x2)')
(dL <- c(deriv(L, 'x1'), deriv(L, 'x2'), deriv(L, 'lambda')))
```

```{r foc-check}
grade_this({if (!inherits(.result, c("yac_symbol"))) {
    fail("Your class of your answer should be a yac_symbol")}
  if (.result[1]$yacas_cmd != "0.25*x1^(-0.75)*x2^0.75-1.5*lambda") { 
    fail("The first FOC should be 0.25*(x2/x1)^0.75-1.5*lambda") }
  pass()
})
```

### First-Order Conditions

Setting the derivatives of the Lagrangean equal to zero finds the "first-order conditions." These conditions find the "critical values" where the Lagrangean switches from increasing to decreasing (or vice-versa) corresponding to maximum (minimum) values. 

$$`r tex(dL[[1]])` = 0 \text{ (w.r.t. good 1)}$$
$$`r tex(dL[[2]])` = 0 \text{ (w.r.t. good 2)}$$
$$`r tex(dL[[3]])` = 0 \text{ (w.r.t. }\lambda)$$

The basic recipe: 

1. Solve the first-order conditions with respect to $x_1$ and $x_2$ for $\lambda$. 
2. Combine these two conditions to form the MU-per dollar or MRS condition. 
$$\frac{MU_1}{p_1} = \frac{MU_2}{p_2} = \lambda \text{, or}$$
Rearranging, this is equivalent to: 
$$MRS_{12} = \frac{MU_1}{MU_2} = \frac{p_1}{p_2}.$$
3. Solve the MU/dollar or MRS condition **and** the budget constraint for $x_2$. 
4. Combine these two equal expressions and solve for $x_1^*$.
5. Repeat 3 and 4 **or** substitute $x_1^*$ to solve for $x_2^*$
6. Substitute $x_1^*$ and $x_2^*$ in the first-order conditions to find $\lambda$.

## Analytical Approach - Equilibrium

### The MRS Condition

Derive the $MRS$ of the example with the following steps: 

1. Solve the first-order conditions with respect the $x_1$ for $\lambda$ using `solve` from `Ryacas`. Pipe this forward to `y_rmvars()` to remove the `lambda ==` and multiply the result by `p1`. Name this object `MU1`. <br>
2. Convert the result to a string with `yac_str` and cancel terms with `Simplify()`. Convert the result back to a `yac_symbol` with `ysym`. 
3. Repeat 1 and 2 for the first-order condition with respect to $x_2$ and name it `MU2`. 
4. Divide `MU1/MU2` to get the MRS. 

```{r MRS, exercise = TRUE, exercise.reveal_solution = TRUE, exercise.lines = 12}

```

```{r MRS-solution}
MU1 <- solve(dL[[1]], 'lambda') |>
  y_rmvars()*p1 
MU1 <- yac_str(MU1) |>
  Simplify() |>
  ysym()
MU2 <- solve(dL[[2]], 'lambda') |>
  y_rmvars()*p2 
MU2 <- yac_str(MU2) |>
  Simplify() |>
  ysym()
MRS <- MU1/MU2 
```

```{r MRS-check}
grade_this({if (!inherits(.result, c("yac_symbol"))) {
    fail("Your class of your answer should be a yac_symbol")}
  if (.result$yacas_cmd != "x2/(3.*x1)") { 
    fail("The MRS should be x2/(3*x1)") }
  pass()
})
```

$$MRS = `r tex(MRS)` = \frac{p_1}{p_2}$$

### Solving for Consumption

Solve for the optimal $x_1^*$ and $x_2^*$. 

1. Solve the $MRS$ condition, `MRS - p1/p2 = 0`, for $x_2$. <br>
Remove the `x2==` using `y_rmvars` and name this `MUpsolve1`. 
2. Solve the budget constraint, `dL[[3]]` for $x_2$ and remove `x2==`. Name this `BCsolve1`. 
3. Combine the result of 1 and 2 by solving `MRSsolve1 - BCsolve1 = 0` for $x_1^*$. Name the result `x1star`, apply `y_rmvars()`. <br? Convert the resulting numerical answer to an `R` expression object and evaluate to convert the result to a simple numeric object. <br> 
4. Remove the LHS variables, convert to an expression, and evaluate the result to get a numerical answer. 

Repeat for $x_2$

```{r solution, exercise = TRUE, exercise.reveal_solution = TRUE}

```

```{r solution-solution}
MRSsolve1 <- solve(MRS - p1/p2, 'x2') |>
    y_rmvars()
BCsolve1 <- solve(dL[[3]], 'x2') |>
    y_rmvars()
x1star <- solve(MRSsolve1 - BCsolve1, 'x1') |> 
  y_rmvars() |> 
  yac_expr() |> 
  eval()
MRSsolve2 <- solve(MRS - p1/p2, 'x1') |>
    y_rmvars()
BCsolve2 <- solve(dL[[3]], 'x1') |>
    y_rmvars()
x2star <- solve(MRSsolve2 - BCsolve2, 'x2') |> 
  y_rmvars() |> 
  yac_expr() |> 
  eval()
```

```{r solution-check}
grade_this({if (!inherits(.result, c("matrix"))) {
    fail("Your class of your answer should be a 1x1 matrix")}
  if (.result != 75) { 
    fail("The optimal quantity of x2 should be 75") }
  pass()
})
```

A trick to get $x_2^*$ in one line involves manipulating the strings using `gsub()` and `parse()` (which we will do to find $\lambda$ next). 

```{r echo = TRUE}
x2star <- parse(text = gsub('x1', x1star, BCsolve1)) |> 
  eval()
```


### Solving for $\lambda$ 

1. Substitute `x1star` for `x1` and `x2star` for `x2` in the $MU\p$ condition with respect to $x_2$ (or $x_1$) using the nested `gsub` functions for making string substitutions. <br>
Sadly, piping doesn't work with `gsub`.
2. Nest (1) within `parse(text = ...)`. Again, piping won't work. 
3. Pass the result to `eval()` to evaluate the calculations.  

```{r lambda, exercise = TRUE}

```

```{r lambda-solution}
lambda <-
  parse(text = gsub('x2', x2star, gsub('x1', x1star, MU1/p1))) |>
  eval()
```

```{r lambda-check}
grade_this({if (!inherits(.result, c("numeric"))) {
    fail("Your class of your answer should be a numeric scalar")}
  if (round(.result, 3) != 0.515) { 
    fail("The value of lambda should be about 0.515") }
  pass()
})
```

If you print the solution for all three choice variables, it will look like this: 

`r c(x1star, x2star, lambda)``

## Computational Solution

Not gonna lie: part of the point of going through the solution analytically was to show you what a pain in the tuchus it can be! (It's not necessarily better doing it on pencil-and-paper "by hand" either!)

Now, we'll set that aside and let the computer crunch the numbers. One downside of this is that we'll lose some of the intuition of the expressions we derived in the analytic solution.

### Setup

Set up the solution by defining the following

1. A utility function, `ux` defined as a `function(x)` object where `x = c(x[1], x[2])`. <br>
Note: most optimization functions find the function minimum by default. Some have an option that switches from minimization to maximization; `solnp` does *not*, so we will minimize the *negation* of the utility function (i.e. put a "-" sign in front).
2. The budget constraint, `bc` defined similarly to `ux`. 
3. The parameters `alpha`, `p1`, `p2`, and `m` using the numerical values from the example.

```{r computeSetup, exercise = TRUE, exercise.reveal_solution = TRUE}

```

```{r computeSetup-solution}
ux <- function(x) {
  - x[1] ^ (alpha) * x[2] ^ (1 - alpha)
}
bc <- function(x) {
  p1 * x[1] + p2 * x[2]
}
alpha = 0.25
p1 = 1.5
p2 = 1
m = 100
```

```{r computeSetup-check}
grade_code() 
```

### Solution

Once we've defined these values, the solution for the optimal consumption bundle involves a single function, `constrOptim`, that doesn't even require installing a separate package! The arguments for this function are (in order): 

1. `pars`: the starting values (an initial "guess") for $x$ (which must be positive - and usually small - for economically-sensible answers);
2. `fun`: the objective function (the utility function, `ux`); 
3. `ineqfun`, `ineqLB`, and `ineqUB`: the constraint inequality function (linear expenditure function), lower bound (zero), and upper bound (income), respectively. 

1. Solve our problem using the previous setup values using `solnp()` and name this object `equilibrium`.
2. Print the values of consumption (`pars`), the Lagrange multiplier (`lagrange`), and the final value of utility at the equilibrium (the last element of (`values`).<br>
Hint: you can extract the last element of a vector using the `tail(v, 1)` function. 

```{r computeSolve, exercise = TRUE, exercise.reveal_solution = TRUE}

```

```{r computeSolve-solution}
equilibrium <- solnp(
  c(1, 1),
  ux,
  ineqfun = bc,
  ineqLB = 0,
  ineqUB = m,
  LB = c(0, 0),
  UB = c(Inf, Inf)
)
equilibrium$pars
-equilibrium$lagrange
-tail(equilibrium$values, 1)
```

```{r computeSolve-check}
grade_this({if (!inherits(.result, c("numeric"))) {
    fail("Your class of your answer should be a numeric scalar")}
  if (round(.result, 1) != 51.5) { 
    fail("The maximum of the utility function should be about 51.5") }
  pass()
})
```

Note that the intuition from the analytical solution tells us that the "true" answer is $x_1 = 50/3 \approx 16.667$ and $x_2 = 75$ to ensure that this consumer spends 25% of their planned budget for the two goods on good 1, or one-third as much as they spend on good 2. Computational methods only give approximate answers, so it's good to double check! 

### Graph of the Equilibrium

We can also graph the equilibrium. 

1. Graph the indifference curve ($x_2 = f(x_1^*;u^*)$, in `'dark green'`) using x-limits (`xlim`) equal to $(0, m/p_1)$ and y-limits (`ylim`) equal to $(0, m/p_2)$ and axis labels (`xlab` and `ylab`) of $x_1$ and $x_2$.<br>(Hint: solve $u(x)$ for $x_2$ as a function of $x_1$ and $u$, then plug in the maximizing value of utility from the solution.)
2. Add the budget constraint using `abline` in `'red'`. 
3. Add a point for equilibrium using `points` in `'blue'`.

```{r graph, exercise = TRUE, exercise.reveal_solution = TRUE, fig.height=6.5, fig.width=4.5, fig.align='center'}

```

```{r graph-solution}
curve(
  (-tail(equilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
  0,
  m / p1,
  xlab = expression(x[1]),
  ylab = expression(x[2]),
  xlim = c(0, m / p1),
  ylim = c(0, m / p2),
  col = 'darkgreen'
)
abline(m / p2, -p1 / p2,
       col = 'red')
points(equilibrium$pars[1],
       equilibrium$pars[2],
       col = 'blue',
       pch = 20)
```

```{r graph-check}

```
