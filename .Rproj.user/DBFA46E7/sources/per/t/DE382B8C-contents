---
title: "1.1 Budget Constraint"
author: Jim Bang
output: 
  learnr::tutorial: 
    progressive: true
runtime: shiny_prerendered
---

```{r setup, include=FALSE}
library(learnr)
library(gradethis)
gradethis_setup()
tutorial_options(exercise.reveal_solution = TRUE, exercise.eval = FALSE, exercise.checker = gradethis_exercise_checker)
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", fig.height = 6.5, fig.width = 8.5)
m = 20
p_d = 1
p_b = 2
par(mar = c(4, 4, 1, 1))
```


## The Budget Constraint

### The Budget Line

The outer boundary of the budget constraint is sometimes called the budget *line*. The equation for this line is:
$$p_1x_1 + p_2x_2 = m$$
Graph a budget line for the quantity of beer, $q_b$, and the quantity of donuts, $q_d$, with $p_b = 2$, $p_d = 1$, and $m = 20$. Use objects to define the parameters. Orient the graph with beer on the x-axis and beer on the y-axis.

```{r budgetLine, exercise = TRUE}

```

```{r budgetLine-solution}
m = 20
p_d = 1
p_b = 2
curve(
  m / p_d - p_b * x / p_d,
  from = 0,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts"
)
```

```{r budgetLine-check}
grade_code() 
```

### The Budget Set 

The entire set of affordable options is sometimes called the budget *set*. This set is defined by the region *under* the budget line with the inequality:
$$p_1x_1 + p_2x_2 \le m$$

Re-plot the budget line from the previous example. Then use the `polygon` function to add the budget *set* for the budget line you graphed in the previous exercise. Use light blue as your fill color. (Hint: specify the x-coordinates of the triangle enclosed by the budget set followed by the corresponding y-coordinates.)

```{r budgetSet, exercise = TRUE}

```

```{r budgetSet-solution}
curve(
  m / p_d - p_b * x / p_d,
  from = 0,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts"
)
polygon(x = c(0, 0, m/p_b), y = c(m/p_d, 0, 0), col = 'lightblue')
```

```{r budgetSet-check}
grade_code() 
```

Note: there is an implicit constraint that the quantities of beer and donuts are both greater than zero. In most cases we are able to ignore these constraints, but some problems lead to "corner solutions" in which consumers only consume one good and would consume negative amounts of the other good (in other words sell?) if possible. 

## Shifts in the Budget Line 

### Price Changes

Price changes alter the budget line by making *one* good relatively more or less affordable. 

```{r priceChange}
question(
  "For a budget line with donuts on the horizontal axis and beer on the vertical axis, an increase in the price of beer will:", 
  answer("make the budget line steeper"),
  answer("make the budget line flatter", correct = TRUE),
  answer("not affect the slope of the budget line")
)
```

Plot the old budget line, and add the new budget line for an increase in the price of donuts to $2 (p_d_new = 2) in <span style="color: red;">red</span>.

```{r priceIncrease, exercise = TRUE}

```

```{r priceIncrease-solution}
p_b_new = 2.5
curve(
  m / p_d - p_b * x / p_d,
  from = 0,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts"
)
curve(
  m / p_d - p_b_new * x / p_d,
  from = 0,
  to = m / p_b_new,
  add = TRUE,
  col = 'red'
)
```

```{r priceIncrease-check}
grade_code() 
```

### Income Changes

Income changes alter the budget line by making *all* goods more or less affordable. 

```{r incomeChange}
question(
  "For a budget line with donuts on the horizontal axis and beer on the vertical axis, an increase in the price of donuts will:", 
  answer("make the budget line steeper"),
  answer("make the budget line flatter"),
  answer("not affect the slope of the budget line", correct = TRUE)
)
```

Plot the old budget line, and add the new budget line for an decrease in income to 15 (m_new = 2) in <span style="color: red;">red</span>.

```{r incomeDecrease, exercise = TRUE}

```

```{r incomeDecrease-solution}
m_new = 15
curve(
  m / p_d - p_b * x / p_d,
  from = 0,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts"
)
curve(
  m_new / p_d - p_b * x / p_d,
  from = 0,
  to = m_new / p_b,
  add = TRUE,
  col = 'red'
)
```

```{r incomeDecrease-check}
grade_code() 
```

## Strategy Examples

### Food Stamps

Consider a consumer who receives "food stamps" that subsidizes up to five donuts (but does not subsidize beer). Graph the budget line for this consumer using the original parameters ($m = 20$, $p_d = 1$, and $p_b = 2$). (Hint: You need to plot two separate lines because there are two segments to this budget line. The first is as if income has increased by the dollar value of 5 donuts; the second part is horizontal noting that you cannot spend the subsidy on beer and so the maximum amount of beer the consumer can buy does not change. Use the `segments(x0, x1, y0, y1)` function to draw this part.)

```{r foodStamps, exercise = TRUE}

```

```{r foodStamps-solution}
s_d = 5
curve(
  s_d + m / p_d - p_b * x / p_d,
  from = 0,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts",
  xlim = c(0, m / p_b),
  ylim = c(0, s_d + m / p_d)
)
segments(
  x0 = m / p_b,
  x1 = m / p_b,
  y0 = 0,
  y1 = s_d
)
```

```{r foodStamps-check}
grade_code() 
```

### BOGO Pricing

Suppose that the donut shop has a pricing schedule of \$1 per single donut or a half-dozen for \$5 (effectively buy five get one free). Graph the budget line for this consumer using the original parameters. (Hint: This budget line will have multiple segments and you will have to think carefully about how to define each one.) Run the following code to plot this budget line in <span style="color: green;">green</span>. 

```{r bogo, exercise = TRUE}
bo <- 5
go <- 1
curve(
  m / p_d - p_b * x / p_d,
  from = m / p_b - p_d * bo / p_b,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts",
  col = "green",
  xlim = c(0, m / p_b), 
  ylim = c(0, floor((m/p_d)/bo) + m / p_d)
)
segments(
  x0 = m / p_b - p_d * bo / p_b,
  x1 = m / p_b - p_d * bo / p_b, 
  y0 = bo,
  y1 = bo + go,
  col = "green"
)
segments(
  x0 = m / p_b - p_d * bo / p_b, 
  x1 = m / p_b - p_d * 2*bo / p_b,
  y0 = bo + go,
  y1 = 2*bo + go, 
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 2*bo / p_b,
  x1 = m / p_b - p_d * 2*bo / p_b, 
  y0 = 2*bo + go,
  y1 = 2*(bo + go),
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 2*bo / p_b, 
  x1 = m / p_b - p_d * 3*bo / p_b,
  y0 = 2*(bo + go),
  y1 = 3*bo + 2*go, 
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 3*bo / p_b,
  x1 = m / p_b - p_d * 3*bo / p_b, 
  y0 = 3*bo + 2*go,
  y1 = 3*(bo + go),
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 3*bo / p_b, 
  x1 = m / p_b - p_d * 4*bo / p_b,
  y0 = 3*(bo + go),
  y1 = 4*bo + 3*go, 
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 4*bo / p_b,
  x1 = m / p_b - p_d * 4*bo / p_b, 
  y0 = 4*bo + 3*go,
  y1 = 4*(bo + go),
  col = "green"
)
```

```{r bogo-solution}
bo <- 5
go <- 1
curve(
  m / p_d - p_b * x / p_d,
  from = m / p_b - p_d * bo / p_b,
  to = m / p_b,
  xlab = "Beer",
  ylab = "Donuts",
  col = "green",
  xlim = c(0, m / p_b), 
  ylim = c(0, floor((m/p_d)/bo) + m / p_d)
)
segments(
  x0 = m / p_b - p_d * bo / p_b,
  x1 = m / p_b - p_d * bo / p_b, 
  y0 = bo,
  y1 = bo + go,
  col = "green"
)
segments(
  x0 = m / p_b - p_d * bo / p_b, 
  x1 = m / p_b - p_d * 2*bo / p_b,
  y0 = bo + go,
  y1 = 2*bo + go, 
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 2*bo / p_b,
  x1 = m / p_b - p_d * 2*bo / p_b, 
  y0 = 2*bo + go,
  y1 = 2*(bo + go),
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 2*bo / p_b, 
  x1 = m / p_b - p_d * 3*bo / p_b,
  y0 = 2*(bo + go),
  y1 = 3*bo + 2*go, 
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 3*bo / p_b,
  x1 = m / p_b - p_d * 3*bo / p_b, 
  y0 = 3*bo + 2*go,
  y1 = 3*(bo + go),
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 3*bo / p_b, 
  x1 = m / p_b - p_d * 4*bo / p_b,
  y0 = 3*(bo + go),
  y1 = 4*bo + 3*go, 
  col = "green"
)
segments(
  x0 = m / p_b - p_d * 4*bo / p_b,
  x1 = m / p_b - p_d * 4*bo / p_b, 
  y0 = 4*bo + 3*go,
  y1 = 4*(bo + go),
  col = "green"
)
```

```{r bogo-check}
grade_code() 
```

