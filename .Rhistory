add = TRUE, col = 'darkorange')     # Firm 1 BR
curve(4 - x - 16/(9*x), add = TRUE)       # Firm 1 Cournot Profit
curve(4 - x - 0/x, add = TRUE, lty = 2)   # Firm 1 Bertrand Profit
curve(4 - x - 2/x, add = TRUE, lty = 3) # Firm 1 Stackelberg Profit
points(x = c(cournot$pars[1], 2, 2, 2, 1), y = c(cournot$pars[2], 1, 2, 0, 1))
text(x = cournot$pars[1], y = cournot$pars[2], "Cournot", adj = c(0.5,0))
text(x = 2, y = 2, "Bertrand", adj = c(0.5,0))
text(x = 2, y = 1, "Stackelberg", adj = c(0.5,1))
text(x = 1, y = 1, "Collusion", adj = c(0.5,1))
text(x = 2, y = 0, "Firm 1 Monopoly", adj = c(0.5,0))
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Bertrand Profit 1',
'Cournot Profit 1', 'Stackelberg Profit 1'),
lty = c(1, 1, 2, 1, 3),
col = c('darkorange', 'darkblue', 'black', 'black', 'black'))
curve((4 - x)/2,                          # Firm 2 BR
from = 0, to = 4,
ylim = c(0,4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2,
add = TRUE, col = 'darkorange')     # Firm 1 BR
curve(4 - x - 16/(9*x), add = TRUE, col = 'darkorange', lty = 2) # Firm 1 Cournot Profit
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Cournot Profit 1'),
lty = c(1, 1, 2),
col = c('darkorange', 'darkblue', 'darkorange'))
library(Ryacas)
pi2star <- ysym('4 - x1 - x2 - 16/9*x2')
solve(pi2star, 0, 'x2')
pi2star <- ysym('4 - x1 - x2 - 16/(9*x2)')
solve(pi2star, 0, 'x2')
curve(((-9)*x+Sqrt(((-9)*x+36)^2-576)+36)/18)
curve(((-9)*x+sqrt(((-9)*x+36)^2-576)+36)/18)
curve((4 - x)/2,                          # Firm 2 BR
from = 0, to = 4,
ylim = c(0,4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2,
add = TRUE, col = 'darkorange')     # Firm 1 BR
curve(4 - x - 16/(9*x), add = TRUE, col = 'darkorange', lty = 2) # Firm 1 Cournot Profit
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Cournot Profit 1'),
lty = c(1, 1, 2),
col = c('darkorange', 'darkblue', 'darkorange'))
curve(((-9)*x+sqrt(((-9)*x+36)^2-576)+36)/18 add = T, col = 'darkblue', lty = 2)
curve(((-9)*x+sqrt(((-9)*x+36)^2-576)+36)/18, add = T, col = 'darkblue', lty = 2)
curve(-(sqrt(((-9)*x+36)^2-576)-((-9)*x+36))/18, add = T, col = 'darkblue', lty = 2)
curve((4 - x)/2,                          # Firm 2 BR
from = 0, to = 4,
ylim = c(0,4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2,
add = TRUE, col = 'darkorange')     # Firm 1 BR
curve(4 - x - 16/(9*x), add = TRUE, col = 'darkorange', lty = 2) # Firm 1 Cournot Profit
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Cournot Profit 1'),
lty = c(1, 1, 2),
col = c('darkorange', 'darkblue', 'darkorange'))
curve(((-9)*x+sqrt(((-9)*x+36)^2-576)+36)/18, from = 0, to = 4/3, add = T, col = 'darkblue', lty = 2)
curve(-(sqrt(((-9)*x+36)^2-576)-((-9)*x+36))/18, from = 0, to = 4/3, add = T, col = 'darkblue', lty = 2)
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Cournot Profit 1', 'Cournot Profit 2'),
lty = c(1, 1, 2, 2),
col = c('darkorange', 'darkblue', 'darkorange', 'darkblue'))
library(Rsolnp)
loss <- function(x) {
x1 <- x[1]
x2 <- x[2]
-(4*x1 - x1*x2 - x1^2)
}
br2c <- function(x) {
x1 <- x[1]
x2 <- x[2]
eval(D(quote(4*x2 - x1*x2 - x2^2), 'x2'))
}
cournot <- solnp(
c(1,1),
loss,
ineqfun = br2c,                   # Solution must be on (or outside) firm 2 BR
ineqLB = -Inf,
ineqUB = 0,
eqfun = function(x) x[1] - x[2], # Solution must be symmetric
eqB = 0,
LB = c(0,0),
control = list(trace = 0)
)
curve((4 - x)/2,                          # Firm 2 BR
from = 0, to = 4,
ylim = c(0,4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2,
add = TRUE, col = 'darkorange')     # Firm 1 BR
curve(4 - x - 16/(9*x),
add = TRUE, col = 'darkorange')       # Firm 1 Cournot Profit
curve(4 - x - 1/x,
add = TRUE, col = 'darkorange', lty = 2)   # Firm 1 Profit = 1
curve(4 - x - 2/x,
add = TRUE, col = 'darkorange', lty = 3) # Firm 1 Profit = 2.5
curve(((-9)*x+sqrt(((-9)*x+36)^2-576)+36)/18, from = 0, to = 4/3,
add = T, col = 'darkblue')  # Top half of Firm 2 isoprofit
curve(-(sqrt(((-9)*x+36)^2-576)-((-9)*x+36))/18, from = 0, to = 4/3,
add = T, col = 'darkblue') # Bottom half of Firm 2 isoprofit
points(x = c(cournot$pars[1], 2, 1), y = c(cournot$pars[2], 0, 1))
text(x = cournot$pars[1], y = cournot$pars[2], "Cournot", adj = c(0.5,0))
text(x = 2, y = 0, "Firm 1 Monopoly", adj = c(0.5,0))
text(x = 1, y = 1, "Collusion", adj = c(0.5,0))
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Firm 1 Profit = 1',
'Equilibrium Profit', 'Firm 1 Profit = 2'),
lty = c(1, 1, 2, 1, 3),
col = c('darkorange', 'darkblue', 'darkorange', 'darkorange', 'darkorange'))
pi2star <- solve(ysym('4 - x1 - x2 - 16/(9*x2)'), 0, 'x2') |>
as_r()
pi2star
pi2star <- solve(ysym('4 - x1 - x2 - 16/(9*x2)'), 0, 'x2') |>
y_rmvars() |>
as_r()
pi2star
pi2star[1]
pi2star[[1]]
pi2starTop <- pi2star[1] |>
as_r()
pi2starBot <- pi2star[2] |>
as_r()
pi2starTop
pi2star
pi2star <- solve(ysym('4 - x1 - x2 - 16/(9*x2)'), 0, 'x2') |>
y_rmvars()
pi2starTop <- pi2star[1] |>
as_r()
pi2starBot <- pi2star[2] |>
as_r()
pi2star
pi2starTop
curve(pi2starTop)
pi2star <- solve(ysym('4 - x - x2 - 16/(9*x2)'), 0, 'x2') |>
y_rmvars()
pi2starTop <- pi2star[1] |>
as_r()
pi2starBot <- pi2star[2] |>
as_r()
pi2starTop
curve(pi2starTop)
pi2starTop <- function(x) eval(pi2starTop)
pi2star
pi2starTop
pi2star <- solve(ysym('4 - x - x2 - 16/(9*x2)'), 0, 'x2') |>
y_rmvars()
pi2starTop <- pi2star[1] |>
as_r()
pi2starBot <- pi2star[2] |>
as_r()
parse(text = pi2starTop)
curve(parse(text = pi2starTop))
# Chunk 1: setup
library(learnr)
library(gradethis)
gradethis_setup(exercise.reveal_solution = TRUE, exercise.eval = TRUE)
knitr::opts_chunk$set(echo = FALSE, fig.height = 6, fig.width = 6, message = FALSE)
# Chunk 2
library(Rsolnp)
Dinv = function(x) {
10 - x
}
loss <- function(x) {
-(Dinv(x)*x - 6*x)
}
eq0 <- solnp(
pars = 1,
fun = loss,
LB = 0,
control = list(trace = 0)
)
p0 = Dinv(eq0$pars)
qi = eq0$pars/2
# Chunk 3
library(Ryacas, warn.conflicts = FALSE)
pi1 <- ysym('4*Q1 - Q1*Q2 - Q1^2')
pi2 <- ysym('4*Q2 - Q1*Q2 - Q2^2')
br1 <- deriv(pi1, 'Q1') |>
solve(0, 'Q1')
br2 <- deriv(pi2, 'Q2') |>
solve(0, 'Q2')
# Chunk 4: brPlot
# Chunk 5: brPlot-solution
curve((4 - x)/2,
from = 0, to = 4,
ylim = c(0,4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2, add = TRUE, col = 'darkorange')
legend('topright',
c('BR of Firm 1', 'BR of Firm 2'),
lty = 1, col = c('darkorange', 'darkblue'))
# Chunk 6: brPlot-check
grade_code()
# Chunk 7
library(Rsolnp)
loss <- function(x) {
x1 <- x[1]
x2 <- x[2]
-(4*x1 - x1*x2 - x1^2)
}
br2c <- function(x) {
x1 <- x[1]
x2 <- x[2]
eval(D(quote(4*x2 - x1*x2 - x2^2), 'x2'))
}
cournot <- solnp(
c(1,1),
loss,
ineqfun = br2c,                   # Solution must be on (or outside) firm 2 BR
ineqLB = -Inf,
ineqUB = 0,
eqfun = function(x) x[1] - x[2], # Solution must be symmetric
eqB = 0,
LB = c(0,0),
control = list(trace = 0)
)
curve((4 - x)/2,                          # Firm 2 BR
from = 0, to = 4,
ylim = c(0,4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2,
add = TRUE, col = 'darkorange')     # Firm 1 BR
curve(4 - x - 16/(9*x),
add = TRUE, col = 'darkorange')       # Firm 1 Cournot Profit
curve(4 - x - 1/x,
add = TRUE, col = 'darkorange', lty = 2)   # Firm 1 Profit = 1
curve(4 - x - 2/x,
add = TRUE, col = 'darkorange', lty = 3) # Firm 1 Profit = 2.5
curve(((-9)*x+sqrt(((-9)*x+36)^2-576)+36)/18, from = 0, to = 4/3,
add = T, col = 'darkblue')  # Top half of Firm 2 isoprofit
curve(-(sqrt(((-9)*x+36)^2-576)-((-9)*x+36))/18, from = 0, to = 4/3,
add = T, col = 'darkblue') # Bottom half of Firm 2 isoprofit
points(x = c(cournot$pars[1], 2, 1), y = c(cournot$pars[2], 0, 1))
text(x = cournot$pars[1], y = cournot$pars[2], "Cournot", adj = c(0.5,0))
text(x = 2, y = 0, "Firm 1 Monopoly", adj = c(0.5,0))
text(x = 1, y = 1, "Collusion", adj = c(0.5,0))
legend('topright',
c('Firm 1 BR', 'Firm 2 BR', 'Firm 1 Profit = 1',
'Equilibrium Profit', 'Firm 1 Profit = 2'),
lty = c(1, 1, 2, 1, 3),
col = c('darkorange', 'darkblue', 'darkorange', 'darkorange', 'darkorange'))
# Chunk 8
pi2star <- solve(ysym('4 - x - x2 - 16/(9*x2)'), 0, 'x2')
# Chunk 9
eq1 <- solve(c(br1, br2), c(0,0), c('Q1', 'Q2')) |>
y_rmvars()
p1 <- 10 - eq1[1] - eq1[2]
# Chunk 10
library(Rsolnp)
loss <- function(x) {
x1 <- x[1]
x2 <- x[2]
-(4*x1 - x1*x2 - x1^2)
}
br2 <- function(x) {
x1 <- x[1]
x2 <- x[2]
eval(D(quote(4*x2 - x1*x2 - x2^2), 'x2'))
}
cournot <- solnp(
c(1,1),
loss,
ineqfun = br2,                   # Solution must be on (or outside) firm 2 BR
ineqLB = -Inf,
ineqUB = 0,
eqfun = function(x) x[1] - x[2], # Solution must be symmetric
eqB = 0,
LB = c(0,0),
control = list(trace = 0)
)
# Chunk 11
cournotLim <- data.frame(
N = seq(1,100, by = 1)
)
cournotLim$Q_i = 4/(cournotLim$N+1)
cournotLim$Price = 10 - (4*cournotLim$N/(cournotLim$N+1))
cournotLim$Profit = cournotLim$Price*cournotLim$Q_i - 6*cournotLim$Q_i
cournotLim$Q_m = cournotLim$N*4/(cournotLim$N+1)
par(mar = c(5, 4, 4, 4) + 0.3)              # Additional space for second y-axis
plot(cournotLim$N, cournotLim$Q_m, type = 'l',
ylim = c(2,8), col = 'blue3',
xlab = "Number of Firms", ylab = "Market Price or Quantity")
lines(cournotLim$N, cournotLim$Price, col = 'lightblue3')
lines(cournotLim$N, rep(4, nrow(cournotLim)), lty = 2)
lines(cournotLim$N, rep(6, nrow(cournotLim)), lty = 3)
par(new = TRUE)                             # Add new plot
plot(cournotLim$N, cournotLim$Profit, type = 'l', col = 'green',
axes = FALSE, ylim = c(0,2), xlab = "", ylab = "")
axis(side = 4, at = pretty(range(cournotLim$Profit)))
legend('topright', legend = c("Market Quantity", "Market Price", "Firm Profit", "Competitive Q", "Competitive P"), col = c('blue3', 'lightblue3', 'green', 'black', 'black'), lty = c(1, 1, 1, 2, 3))
# Chunk 12
library(ggplot2)
MicroWithR::gameTree(players = c("Firm 1", "Firm 2"), strategies = c("BR(Q)", "Low Q"), payoffs1 = c(2, 2, 1, 2), payoffs2 = c(1, 1, 2, 2))
# Chunk 13: stackelberg
# Chunk 14: stackelberg-solution
solution <- solnp(
c(1,1),
loss,
eqfun = br2, # Solution need only satisfy firm 2 best response
eqB = 0,
LB = c(0,0), # No symmetry constraint
control = list(trace = 0)
)
# Chunk 15: stackelberg-check
grade_code()
curve((4 - x)/2,
from = 0, to = 4,
ylim = c(0, 4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2, add = TRUE, col = 'darkorange')
curve(4 - x - 2/x, add = TRUE)
legend('topright',
c('BR of Firm 1', 'BR of Firm 2', 'Leader Max Profit'),
lty = c('solid', 'solid', 'solid'),
col = c('darkorange', 'darkblue', 'darkorange'))
points(x = c(1, 2, 2), y = c(1, 1, 0))
text(x = 1, y = 1, "Collusion", adj = c(0.5,0))
text(x = 2, y = 1, "Stackelberg", adj = c(0.5,1))
text(x = 2, y = 0, "Firm 1 Monopoly", adj = c(0.5,0))
pi2star <- solve(ysym('4 - x - x2 - 1/x2'), 0, 'x2')
pi2star
curve((4 - x)/2,
from = 0, to = 4,
ylim = c(0, 4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2, add = TRUE, col = 'darkorange')
curve(4 - x - 2/x, add = TRUE, col = 'darkorange')
curve(-(x+sqrt((4-x)^2-4)-4)/2, add = TRUE, col = 'darkblue')
curve(-(x-4-Sqrt((4-x)^2-4))/2, add = TRUE, col = 'darkblue')
curve((4 - x)/2,
from = 0, to = 4,
ylim = c(0, 4), col = 'darkblue',
xlab = expression(Q[1]),
ylab = expression(Q[2]))
curve(4-2*x, from = 0, to = 2, add = TRUE, col = 'darkorange')
curve(4 - x - 2/x, add = TRUE, col = 'darkorange')
curve(-(x+sqrt((4-x)^2-4)-4)/2, add = TRUE, col = 'darkblue')
curve(-(x-4-sqrt((4-x)^2-4))/2, add = TRUE, col = 'darkblue')
legend('topright',
c('BR of Firm 1', 'BR of Firm 2', 'Leader Profit', 'Follower Profit'),
lty = c('solid', 'solid', 'solid', 'solid'),
col = c('darkorange', 'darkblue', 'darkorange', 'darkblue'))
points(x = c(1, 2, 2), y = c(1, 1, 0))
text(x = 1, y = 1, "Collusion", adj = c(0.5,0))
text(x = 2, y = 1, "Stackelberg", adj = c(0.5,1))
text(x = 2, y = 0, "Firm 1 Monopoly", adj = c(0.5,0))
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- NULL
for (i in 1:length(p1)) {
if(i == 1) {pars <- c(1,1) }
else {pars <- c1[i-1]}
c1[i] <- solnp(pars = pars, ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0),
UB = c(Inf, Inf), control = list(trace = 0))$pars
}
i
c1
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- NULL
for (i in 1:length(p1)) {
if(i == 1) {pars <- c(1,1) }
else {pars <- c1[i-1]}
c1[i] <- solnp(pars = pars, ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0),
UB = c(Inf, Inf), control = list(trace = 0))$pars
}
c1
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
solnp(pars = c(1,1), ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0),
UB = c(Inf, Inf), control = list(trace = 0))$pars
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[1]*x[1] + p2*x[2]
solnp(pars = c(1,1), ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0),
UB = c(Inf, Inf), control = list(trace = 0))$pars
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- NULL
for (i in 1:length(p1)) {
if(i == 1) {pars <- c(1,1) }
else {pars <- c1[i-1]}
temp <- solnp(pars = pars, ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0), UB = c(Inf, Inf), control = list(trace = 0))
c1[i,1] <- temp$pars[1]
c1[i,2] <- temp$pars[2]
}
c1
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- matrix(nrow = length(p1, ncol = 2))
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- matrix(nrow = length(p1), ncol = 2)
c1
p1
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- matrix(nrow = length(p1), ncol = 2)
for (i in 1:length(p1)) {
if(i == 1) {pars <- c(1,1) }
else {pars <- c1[i-1]}
temp <- solnp(pars = pars, ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0), UB = c(Inf, Inf), control = list(trace = 0))
c1[i,1] <- temp$pars[1]
c1[i,2] <- temp$pars[2]
}
i
c1
library(Rsolnp); a = 0.25; p2 = 1; m = 100; p1 <- seq(0.25, 2.5, 0.05)
ux <- function(x) - x[1] ^ a * x[2] ^ (1 - a)
bc <- function(x) p1[i]*x[1] + p2*x[2]
c1 <- matrix(nrow = length(p1), ncol = 2)
for (i in 1:length(p1)) {
if(i == 1) {pars <- c(1,1) }
else {pars <- c1[i-1,]}
temp <- solnp(pars = pars, ux, ineqfun = bc, ineqLB = 0, ineqUB = m, LB = c(0, 0), UB = c(Inf, Inf), control = list(trace = 0))
c1[i,1] <- temp$pars[1]
c1[i,2] <- temp$pars[2]
}
c1
library(Rsolnp)
set.seed(8675309); m <- rlnorm(200, meanlog = log(100), sdlog = 0.25)
p1 <- seq(0.25, 2.5, 0.05); p2 = 1; a <- runif(200, min = 0.1, max = 0.9)
c1 <- matrix(nrow = length(p1), ncol = length(a))
ux <- function(x) - x[1] ^ a[j] * x[2] ^ (1 - a[j])
bc <- function(x) p1[i] * x[1] + p2 * x[2]
for (i in 1:length(p1)) {
if (i == 1) {
pars <- c(1, 1)
} else {
pars <- c$pars
}
for (j in 1:length(m)) {
c <-
solnp(
pars = pars,
ux,
ineqfun = bc,
ineqLB = 0,
ineqUB = m[j],
LB = c(0, 0),
UB = c(Inf, Inf),
control = list(trace = 0)
)
c1[i, j] <- c$pars[1]
}
}
marketDemand <- rowSums(c1)
summary(marketDemand)
c1
summary(c1)
c1
head(c1)
class(c1)
max(c1[, 1:10])
max(c1)
plot(
x = c1[, 1],
y = p1,
type = 'l',
xlim = c(0, max(c1),
ylim = c(0, 2.5),
xlab = expression(Quantity~of~x[1]),
ylab = 'Price'
)
lines(c1[, 2],  p1, col = 'green3')
plot(
x = c1[, 1],
y = p1,
type = 'l',
xlim = c(0, max(c1),
ylim = c(0, 2.5),
xlab = expression(Quantity~of~x[1]),
ylab = 'Price'
)
lines(c1[, 2],  p1, col = 'green3')
plot(
x = c1[, 1],
y = p1,
type = 'l',
xlim = c(0, max(c1)),
ylim = c(0, 2.5),
xlab = expression(Quantity~of~x[1]),
ylab = 'Price'
)
lines(c1[, 2],  p1, col = 'green3')
lines(c1[, 3],  p1, col = 'darkblue')
lines(c1[, 4],  p1, col = 'darkorange2')
lines(c1[, 5],  p1, col = 'red3')
lines(c1[, 6],  p1, col = 'blue')
lines(c1[, 7],  p1, col = 'purple3')
lines(c1[, 8],  p1, col = 'brown4')
lines(c1[, 9],  p1, col = 'gray')
lines(c1[, 10], p1, col = 'gold2')
install.packages('MicroWithR')
install.packages("MicroWithR")
