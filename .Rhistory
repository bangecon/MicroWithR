dmEquilibrium2$pars[2],
col = 'blue',
pch = 20)
arrows(
x0 = 0,
y0 = 0,
x1 = dmEquilibrium$pars[1],
y1 = dmEquilibrium$pars[2]
)
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - a)) / (x ^ (a / (1 - a))),
from = 0,
to = m / p1,
xlim = c(0, (m + dm) / p1),
ylim = c(0, (m + dm) / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$pars[1],
initialEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(dmEquilibrium$values, 1)) ^ (1 / (1 - a)) / (x ^ (a / (1 - a))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline((m + dm) / p2,-p1 / p2, col = 'red', lty = 'dashed')
points(dmEquilibrium$pars[1],
dmEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(dmEquilibrium2$values, 1)) ^ (1 / (1 - a)) / (x ^ (a / (1 - a))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline((m - dm) / p2,-p1 / p2, col = 'red', lty = 'dashed')
points(dmEquilibrium2$pars[1],
dmEquilibrium2$pars[2],
col = 'blue',
pch = 20)
arrows(
x0 = 0,
y0 = 0,
x1 = dmEquilibrium$pars[1],
y1 = dmEquilibrium$pars[2]
)
grade_code()
# We solved for consumption (and utility at that consumption) for the original price, the price after an increase, and after a decrease.
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - a)) / (x ^ (a / (1 - a))),
from = 0,
to = m / p1,
xlim = c(0, m / (p1 - dp1)),
ylim = c(0, m / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
curve(
(-tail(lowPEquilibrium$values, 1)) ^ (1 / (1 - a)) / (x ^ (a / (1 - a))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 - dp1) / p2, col = 'red', lty = 'dashed')
curve(
(-tail(highPEquilibrium$values, 1)) ^ (1 / (1 - a)) / (x ^ (a / (1 - a))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 + dp1) / p2, col = 'red', lty = 'dashed')
grade_code()
u <- ysym('x1^(alpha) * x2^(1-alpha)')
L <- u + ysym('lambda*(m - p1*x1 - p2*x2)')
dL <- deriv(L, c('x1', 'x2', 'lambda'))
MU <- deriv(u, c('x1', 'x2'))
MRS <- yac_str(MU[1]/MU[2]) |>
Simplify() |>
ysym()
D <- solve(c(MRS, dL[[3]]), c(ysym('p1/p2'), 0), c('x1', 'x2')) |>
y_rmvars() |>
simplify()
D[1] <- with_value(D[1], 'x2', D[2]) |>
simplify()
u <- ysym('x1^(alpha) * x2^(1-alpha)')
L <- u + ysym('lambda*(m - p1*x1 - p2*x2)')
dL <- deriv(L, c('x1', 'x2', 'lambda'))
MU <- deriv(u, c('x1', 'x2'))
MRS <- yac_str(MU[1]/MU[2]) |>
Simplify() |>
ysym()
D <- solve(c(MRS, dL[[3]]), c(ysym('p1/p2'), 0), c('x1', 'x2')) |>
y_rmvars() |>
simplify()
D[1] <- with_value(D[1], 'x2', D[2]) |>
simplify()
grade_code()
(statics <- deriv(D, c('m', 'p1', 'p2')))
(statics <- deriv(D, c('m', 'p1', 'p2')))
grade_code()
curve(
(a / p1) * x,
from = 0,
to = 150,
xlab = expression("Income"),
ylab = expression(x[1])
)
grade_code()
m4 = seq(60, 120, 20)
complements <- function(x) {
- min(x[1] ^ 2, 25 * x[2])
}
nonlinearIEPEquilibrium060m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[1],
LB = c(0,0),
UB = c(Inf, Inf)
);
nonlinearIEPEquilibrium080m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[2],
LB = c(0,0),
UB = c(Inf, Inf)
);
nonlinearIEPEquilibrium100m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[3],
LB = c(0,0),
UB = c(Inf, Inf)
);
nonlinearIEPEquilibrium120m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[4],
LB = c(0,0),
UB = c(Inf, Inf)
);
par(mfrow = c(1, 3));
plot(
x = rep(nonlinearIEPEquilibrium060m$pars[1], 10),
y = seq(nonlinearIEPEquilibrium060m$pars[2], 120, length.out = 10),
type = 'l',
col = 'dark green',
xlim = c(0, m4[4] / p1),
ylim = c(0, m4[4] / p2),
xlab = expression(x[1]),
ylab = expression(x[2])
);
segments(
x0 = nonlinearIEPEquilibrium060m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium060m$pars[2],
y1 = nonlinearIEPEquilibrium060m$pars[2],
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = nonlinearIEPEquilibrium080m$pars[1],
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = 120,
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = nonlinearIEPEquilibrium080m$pars[2],
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = nonlinearIEPEquilibrium100m$pars[1],
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = 120,
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = nonlinearIEPEquilibrium100m$pars[2],
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = nonlinearIEPEquilibrium120m$pars[1],
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = 120,
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = nonlinearIEPEquilibrium120m$pars[2],
col = 'dark green'
);
abline(100 / p2,-p1 / p2, col = 'red');
curve(x ^ 2 / 25, add = TRUE);
curve(
p2 * x ^ 2 / 25 + p1 * x,
xlim = c(0, nonlinearIEPEquilibrium120m$pars[1]),
ylim = c(0, m4[4]),
xlab = expression(x[1]),
ylab = 'Income'
);
curve(
p2 * x + 5 * p1 * sqrt(x),
xlim = c(0, nonlinearIEPEquilibrium120m$pars[2]),
ylim = c(0, m4[4]),
xlab = expression(x[2]),
ylab = 'Income'
);
par(mfrow = c(1,1))
m4 = seq(60, 120, 20)
complements <- function(x) {
- min(x[1] ^ 2, 25 * x[2])
}
nonlinearIEPEquilibrium060m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[1],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium080m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[2],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium100m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[3],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium120m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[4],
LB = c(0,0),
UB = c(Inf, Inf)
)
par(mfrow = c(1, 3))
plot(
x = rep(nonlinearIEPEquilibrium060m$pars[1], 10),
y = seq(nonlinearIEPEquilibrium060m$pars[2], 120, length.out = 10),
type = 'l',
col = 'dark green',
xlim = c(0, m4[4] / p1),
ylim = c(0, m4[4] / p2),
xlab = expression(x[1]),
ylab = expression(x[2])
)
segments(
x0 = nonlinearIEPEquilibrium060m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium060m$pars[2],
y1 = nonlinearIEPEquilibrium060m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = nonlinearIEPEquilibrium080m$pars[1],
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = nonlinearIEPEquilibrium080m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = nonlinearIEPEquilibrium100m$pars[1],
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = nonlinearIEPEquilibrium100m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = nonlinearIEPEquilibrium120m$pars[1],
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = nonlinearIEPEquilibrium120m$pars[2],
col = 'dark green'
)
abline(100 / p2,-p1 / p2, col = 'red')
curve(x ^ 2 / 25, add = TRUE)
curve(
p2 * x ^ 2 / 25 + p1 * x,
xlim = c(0, nonlinearIEPEquilibrium120m$pars[1]),
ylim = c(0, m4[4]),
xlab = expression(x[1]),
ylab = 'Income'
)
curve(
p2 * x + 5 * p1 * sqrt(x),
xlim = c(0, nonlinearIEPEquilibrium120m$pars[2]),
ylim = c(0, m4[4]),
xlab = expression(x[2]),
ylab = 'Income'
)
par(mfrow = c(1,1))
grade_code()
plot(
initialEquilibrium$pars[1],
p1,
type = 'p',
xlim = c(0, 60),
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
points(lowPEquilibrium$pars[1], p1 - dp1)
points(highPEquilibrium$pars[1], p1 + dp1)
grade_code()
plot(
initialEquilibrium$pars[1],
p1,
type = 'p',
xlim = c(0, 60),
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
points(lowPEquilibrium$pars[1], p1 - dp1)
points(highPEquilibrium$pars[1], p1 + dp1)
plot(
initialEquilibrium$pars[1],
p1,
type = 'p',
xlim = c(0, 60),
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
points(lowPEquilibrium$pars[1], p1 - dp1)
points(highPEquilibrium$pars[1], p1 + dp1)
segments(
x0 = initialEquilibrium$pars[1],
y0 = p1,
x1 = lowPEquilibrium$pars[1],
y1 = p1 - dp1
)
segments(
x0 = initialEquilibrium$pars[1],
y0 = p1,
x1 = highPEquilibrium$pars[1],
y1 = p1 + dp1
)
grade_code()
p1seq <- seq(0.5, 2.5, 0.1)
c1 <- NULL
for (i in 1:length(p1seq)) {
if(i == 1) {
pars <- c(1,1)
} else {
pars <- c
}
c <- solnp(
pars = pars,
ux,
ineqfun = function(x) p1seq[i] * x[1] + p2 * x[2],
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)$pars
c1[i] <- c[1]
}
plot(c1,
p1seq,
type = 'l',
xlim = c(0, 50),
ylim = c(0, 2.5),
xlab = 'Quantity of Good 1',
ylab = 'Price of Good 1')
p1seq <- seq(0.5, 2.5, 0.1)
c1 <- NULL
for (i in 1:length(p1seq)) {
if(i == 1) {
pars <- c(1,1)
} else {
pars <- c
}
c <- solnp(
pars = pars,
ux,
ineqfun = function(x) p1seq[i] * x[1] + p2 * x[2],
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)$pars
c1[i] <- c[1]
}
plot(c1,
p1seq,
type = 'l',
xlim = c(0, 50),
ylim = c(0, 2.5),
xlab = 'Quantity of Good 1',
ylab = 'Price of Good 1')
grade_code()
curve(
a * m / x,
from = 0,
to = 2.5,
ylim = c(0, 50),
xlab = "Price of Good 1",
ylab = "Quantity of Good 1"
)
curve(
a * m / x,
from = 0,
to = 50,
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
grade_code("Samesies!")
library(Rsolnp)
u0 <- -tail(initialEquilibrium$values, 1)
x0 <- initialEquilibrium$pars
xTilde <-
solnp(
pars = x0,
fun = bcLowP,
ineqfun = ux,
ineqLB = -Inf,
ineqUB = -u0,
LB = c(0, 0),
UB = c(Inf, Inf)
)
xTilde
u0 <- -tail(initialEquilibrium$values, 1)
x0 <- initialEquilibrium$pars
xTilde <-
solnp(
pars = x0,
fun = bcLowP,
ineqfun = ux,
ineqLB = -Inf,
ineqUB = -u0,
LB = c(0, 0),
UB = c(Inf, Inf)
)
xTilde
grade_code()
devtools::document()
source("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/R/MicroInvestmentExample.R", echo=TRUE)
devtools::document()
available_tutorials()
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1_ProductionFunctions/2_1_ProductionFunctions.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1_ProductionFunctions/2_1_ProductionFunctions.Rmd")
