drtsSchedule$Quantity,
drtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 10000),
xlab = "Quantity",
ylab = "Total Cost"
)
plot(
drtsSchedule$Quantity,
drtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 2),
xlab = "Quantity",
ylab = "Average Cost"
)
head(drtsSchedule)
irtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),          # Initialize 51 Q's
Labor = NA,
Capital = NA,
Total_Cost = NA,
Average_Cost = NA
)
irts <- function(x) {
100 * x[1] ^ (2*alpha) * x[2] ^ (2*alpha)                 # Define constraint
}
# Since alpha = 1/3, the exponents sum to more than one.
for (i in 1:nrow(irtsSchedule)) {                           # Initialize for-loop
costMinTemp <- solnp(
pars = c(1, 1),                                         # Set initial pars
fun = tc,
ineqfun = irts,
ineqLB = irtsSchedule$Quantity[i],                      # Set ineqLB to Q[i]
ineqUB = Inf,
LB = c(0, 0),                                           # Nonnegative constraint
UB = c(Inf, Inf),
control = list(trace = 0)
)
irtsSchedule$Labor[i] <- costMinTemp$pars[1]              # Optimal labor input
irtsSchedule$Capital[i] <- costMinTemp$pars[2]            # Optimal capital input
irtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1) # Calculate total cost
}
irtsSchedule$Average_Cost <-
irtsSchedule$Total_Cost / irtsSchedule$Quantity           # Calculate ATC
par(mfrow = c(1, 2))
plot(
irtsSchedule$Quantity,
irtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 600),
xlab = "Quantity",
ylab = "Total Cost"
)
plot(
irtsSchedule$Quantity,
irtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Cost"
)
head(irtsSchedule)
srCrtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),
Labor = NA,
Capital = 25,
Total_Cost = NA,
Average_Cost = NA
)
srCrts <- function(x) {
100 * x ^ (alpha) * 25 ^ (1 - alpha)
}
srtc <- function(x) {
w * x + r * 25
}
for (i in 1:nrow(srCrtsSchedule)) {
costMinTemp <- solnp(
pars = 1,
fun = srtc,
ineqfun = srCrts,
ineqLB = srCrtsSchedule$Quantity[i],
ineqUB = Inf,
LB = 0,
UB = Inf,
control = list(trace = 0)
)
srCrtsSchedule$Labor[i] <- costMinTemp$pars[1]
srCrtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1)
}
srCrtsSchedule$Average_Cost <-
srCrtsSchedule$Total_Cost / srCrtsSchedule$Quantity
par(mfrow = c(1, 2))
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Total Cost"
)
head(srCrtsSchedule)
srCrtsSchedule$Variable_Cost <- w * srCrtsSchedule$Labor
srCrtsSchedule$Average_Variable_Cost <-
srCrtsSchedule$Variable_Cost / srCrtsSchedule$Quantity
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
lines(
srCrtsSchedule$Quantity,
srCrtsSchedule$Variable_Cost,
col = 'purple'
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Cost"
)
lines(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Variable_Cost,
col = 'purple'
)
# Find TC(Q_{i+1}) - TC(Q_{i-1}) / (2 * dQ)
srCrtsSchedule$Marginal_Cost <-
c(NA,diff(srCrtsSchedule$Total_Cost, lag = 2)/200, NA)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average/Marginal Cost"
)
lines(srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Variable_Cost,
col = 'purple')
lines(srCrtsSchedule$Quantity,
srCrtsSchedule$Marginal_Cost,
col = 'red')
library(Rsolnp)     # Don't forget to load libraries!
par(mfrow = c(1, 2))
alpha = 1 / 3
w = 10
r = 20
crtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),          # Initialize 51 Q's
Labor = NA,
Capital = NA,
Total_Cost = NA,
Average_Cost = NA
)
tc <- function(x) {
w * x[1] + r * x[2]                                       # Define objective
}
crts <- function(x) {
100 * x[1] ^ alpha * x[2] ^ (1 - alpha)                   # Define constraint
}
for (i in 1:nrow(crtsSchedule)) {                           # Initialize for-loop
costMinTemp <- solnp(
pars = c(1, 1),                                         # Set initial pars
fun = tc,
ineqfun = crts,
ineqLB = crtsSchedule$Quantity[i],                      # Set ineqLB to Q[i]
ineqUB = Inf,
LB = c(0, 0),                                           # Nonnegative constraint
UB = c(Inf, Inf),
control = list(trace = 0)
)
crtsSchedule$Labor[i] <- costMinTemp$pars[1]              # Optimal labor input
crtsSchedule$Capital[i] <- costMinTemp$pars[2]            # Optimal capital input
crtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1) # Calculate total cost
}
crtsSchedule$Average_Cost <-
crtsSchedule$Total_Cost / crtsSchedule$Quantity           # Calculate ATC
srCrtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),
Labor = NA,
Capital = 25,
Total_Cost = NA,
Average_Cost = NA
)
srCrts <- function(x) {
100 * x ^ (alpha) * 25 ^ (1 - alpha)
}
srtc <- function(x) {
w * x + r * 25
}
for (i in 1:nrow(srCrtsSchedule)) {
costMinTemp <- solnp(
pars = 1,
fun = srtc,
ineqfun = srCrts,
ineqLB = srCrtsSchedule$Quantity[i],
ineqUB = Inf,
LB = 0,
UB = Inf,
control = list(trace = 0)
)
srCrtsSchedule$Labor[i] <- costMinTemp$pars[1]
srCrtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1)
}
srCrtsSchedule$Average_Cost <-
srCrtsSchedule$Total_Cost / srCrtsSchedule$Quantity
par(mfrow = c(1, 2))
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Total Cost"
)
head(srCrtsSchedule)
library(Rsolnp)     # Don't forget to load libraries!
par(mfrow = c(1, 1))
alpha = 1 / 3
w = 10
r = 20
crtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),          # Initialize 51 Q's
Labor = NA,
Capital = NA,
Total_Cost = NA,
Average_Cost = NA
)
tc <- function(x) {
w * x[1] + r * x[2]                                       # Define objective
}
crts <- function(x) {
100 * x[1] ^ alpha * x[2] ^ (1 - alpha)                   # Define constraint
}
for (i in 1:nrow(crtsSchedule)) {                           # Initialize for-loop
costMinTemp <- solnp(
pars = c(1, 1),                                         # Set initial pars
fun = tc,
ineqfun = crts,
ineqLB = crtsSchedule$Quantity[i],                      # Set ineqLB to Q[i]
ineqUB = Inf,
LB = c(0, 0),                                           # Nonnegative constraint
UB = c(Inf, Inf),
control = list(trace = 0)
)
crtsSchedule$Labor[i] <- costMinTemp$pars[1]              # Optimal labor input
crtsSchedule$Capital[i] <- costMinTemp$pars[2]            # Optimal capital input
crtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1) # Calculate total cost
}
crtsSchedule$Average_Cost <-
crtsSchedule$Total_Cost / crtsSchedule$Quantity           # Calculate ATC
srCrtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),
Labor = NA,
Capital = 25,
Total_Cost = NA,
Average_Cost = NA
)
srCrts <- function(x) {
100 * x ^ (alpha) * 25 ^ (1 - alpha)
}
srtc <- function(x) {
w * x + r * 25
}
for (i in 1:nrow(srCrtsSchedule)) {
costMinTemp <- solnp(
pars = 1,
fun = srtc,
ineqfun = srCrts,
ineqLB = srCrtsSchedule$Quantity[i],
ineqUB = Inf,
LB = 0,
UB = Inf,
control = list(trace = 0)
)
srCrtsSchedule$Labor[i] <- costMinTemp$pars[1]
srCrtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1)
}
srCrtsSchedule$Average_Cost <-
srCrtsSchedule$Total_Cost / srCrtsSchedule$Quantity
par(mfrow = c(1, 2))
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Total Cost"
)
head(srCrtsSchedule)
srCrtsSchedule$Variable_Cost <- w * srCrtsSchedule$Labor
srCrtsSchedule$Average_Variable_Cost <-
srCrtsSchedule$Variable_Cost / srCrtsSchedule$Quantity
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
lines(
srCrtsSchedule$Quantity,
srCrtsSchedule$Variable_Cost,
col = 'purple'
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Cost"
)
lines(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Variable_Cost,
col = 'purple'
)
srCrtsSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),
Labor = NA,
Capital = 25,
Total_Cost = NA,
Average_Cost = NA
)
srCrts <- function(x) {
100 * x ^ (alpha) * 25 ^ (1 - alpha)
}
srtc <- function(x) {
w * x + r * 25
}
for (i in 1:nrow(srCrtsSchedule)) {
costMinTemp <- solnp(
pars = 1,
fun = srtc,
ineqfun = srCrts,
ineqLB = srCrtsSchedule$Quantity[i],
ineqUB = Inf,
LB = 0,
UB = Inf,
control = list(trace = 0)
)
srCrtsSchedule$Labor[i] <- costMinTemp$pars[1]
srCrtsSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1)
}
srCrtsSchedule$Average_Cost <-
srCrtsSchedule$Total_Cost / srCrtsSchedule$Quantity
par(mfrow = c(1, 2))
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Total Cost"
)
head(srCrtsSchedule)
srCrtsSchedule$Variable_Cost <- w * srCrtsSchedule$Labor
srCrtsSchedule$Average_Variable_Cost <-
srCrtsSchedule$Variable_Cost / srCrtsSchedule$Quantity
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Total_Cost,
type = 'l',
ylim = c(0, 2500),
xlab = "Quantity",
ylab = "Total Cost"
)
lines(
srCrtsSchedule$Quantity,
srCrtsSchedule$Variable_Cost,
col = 'purple'
)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average Cost"
)
lines(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Variable_Cost,
col = 'purple'
)
par(mfrow = c(1, 1))
# Find TC(Q_{i+1}) - TC(Q_{i-1}) / (2 * dQ)
srCrtsSchedule$Marginal_Cost <-
c(NA,diff(srCrtsSchedule$Total_Cost, lag = 2)/200, NA)
plot(
srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Cost,
type = 'l',
ylim = c(0, 0.5),
xlab = "Quantity",
ylab = "Average/Marginal Cost"
)
lines(srCrtsSchedule$Quantity,
srCrtsSchedule$Average_Variable_Cost,
col = 'purple')
lines(srCrtsSchedule$Quantity,
srCrtsSchedule$Marginal_Cost,
col = 'red')
library(learnr)
library(gradethis)
gradethis_setup(exercise.reveal_solution = FALSE, exercise.eval = TRUE)
knitr::opts_chunk$set(echo = FALSE, fig.height = 6, fig.width = 6)
library(Ryacas)
library(Deriv)
library(Rsolnp)
w = 1; r = 2
costSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 100),
Labor = NA,
Capital = NA,
Total_Cost = NA,
Average_Cost = NA
)
for (i in 1:nrow(costSchedule)) {
costMinTemp <- solnp(
pars = c(1, 1),
fun = function(x) w*x[1] + r*x[2],
ineqfun = function(x) 100*(x[1] + x[2]),
ineqLB = costSchedule$Quantity[i],
ineqUB = Inf,
LB = c(0, 0))
costSchedule$Labor[i] <- costMinTemp$pars[1]
costSchedule$Capital[i] <- costMinTemp$pars[2]
costSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1)
}
costSchedule$Average_Cost <- costSchedule$Total_Cost / costSchedule$Quantity
par(mfrow = c(1, 2))
plot(costSchedule$Quantity, costSchedule$Total_Cost, type = 'l', ylim = c(0,50), xlab = "Quantity", ylab = "Total Cost")
plot(costSchedule$Quantity, costSchedule$Average_Cost, type = 'l', ylim = c(0,0.02), xlab = "Quantity", ylab = "Average Cost")
SRcostSchedule <-
data.frame(
Quantity = seq(from = 0, to = 5000, by = 20),
Labor = NA,
Capital = 10,
Total_Cost = NA,
Average_Cost = NA
)
for (i in 1:nrow(SRcostSchedule)) {
costMinTemp <- solnp(
pars = 1,
fun = function(x) w*x + r*10,
ineqfun = function(x) 100*(x + 10),
ineqLB = SRcostSchedule$Quantity[i],
ineqUB = Inf,
LB = 0)
SRcostSchedule$Labor[i] <- costMinTemp$pars[1]
SRcostSchedule$Variable_Cost[i] <- w*SRcostSchedule$Labor[i]
SRcostSchedule$Total_Cost[i] <- tail(costMinTemp$values, 1)
}
SRcostSchedule$Average_Cost <- SRcostSchedule$Total_Cost / SRcostSchedule$Quantity
SRcostSchedule$Average_Variable_Cost <-
SRcostSchedule$Variable_Cost / SRcostSchedule$Quantity
SRcostSchedule$Marginal_Cost <-
c(NA,diff(SRcostSchedule$Total_Cost, lag = 2)/40, NA)
par(mfrow = c(1, 2))
plot(SRcostSchedule$Quantity, SRcostSchedule$Total_Cost, type = 'l', ylim = c(0,50), xlab = "Quantity", ylab = "Total Cost")
lines(SRcostSchedule$Quantity, SRcostSchedule$Variable_Cost, col = 'darkorange')
plot(SRcostSchedule$Quantity, SRcostSchedule$Average_Cost, type = 'l', ylim = c(0,0.05), xlab = "Quantity", ylab = "Average Cost")
lines(SRcostSchedule$Quantity, SRcostSchedule$Average_Variable_Cost, col = 'darkorange')
lines(SRcostSchedule$Quantity, SRcostSchedule$Marginal_Cost, col = 'red')
