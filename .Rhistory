(u_ned(e_ned[1], e_ned[2])/Q_b^0.75)^(1/0.25)
}
g_homer <- ggplot() +
geom_function(fun = ic_homer) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_homer <- ggplot() +
geom_function(fun = ic_homer) +
geom_point(aes(x = e_homer[1], y = e_homer[2]), color = "blue") +
geom_abline(
slope = -0.95/0.05,
intercept = 5 + 0.95/0.05 * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_homer
g_homer <- ggplot() +
geom_function(fun = ic_homer) +
geom_point(aes(x = e_homer[1], y = e_homer[2]), color = "blue") +
geom_abline(
slope = -0.05/0.95,
intercept = 5 + 0.95/0.05 * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_homer <- ggplot() +
geom_function(fun = ic_homer) +
geom_point(aes(x = e_homer[1], y = e_homer[2]), color = "blue") +
geom_abline(
slope = -0.05/0.95,
intercept = 5 + 0.05/0.95 * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_homer
g_ned <- ggplot() +
geom_function(fun = ic_ned) +
geom_point(aes(x = e_ned[1], y = e_ned[2]), color = "blue") +
geom_abline(
slope = -0.75/0.25,
intercept = 5 + 0.75/0.25 * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_ned
ggarrange(g_homer, g_ned)
library(ggpubr)
ggarrange(g_homer, g_ned)
library(ggplot2)
a_homer = 0.05
a_ned = 0.75
u_homer <- function(Q_b, Q_d) {
Q_b^a_homer * Q_d^(1-a_homer)
}
u_ned <- function(Q_b, Q_d) {
Q_b^a_ned * Q_d^(1-a_ned)
}
e_homer = c(5, 5)
e_ned = c(5, 5)
ic_homer <- function(Q_b) {
(u_homer(e_homer[1], e_homer[2])/Q_b^a_homer)^(1/(1-a_homer))
}
ic_ned <- function(Q_b) {
(u_ned(e_ned[1], e_ned[2])/Q_b^a_ned)^(1/(1-a_ned))
}
g_homer <- ggplot() +
geom_function(fun = ic_homer) +
geom_point(aes(x = e_homer[1], y = e_homer[2]), color = "blue") +
geom_abline(
slope = -a_homer/(1-a_homer),
intercept = 5 + a_homer5/(1-a_homer) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
library(ggplot2)
a_homer = 0.05
a_ned = 0.75
u_homer <- function(Q_b, Q_d) {
Q_b^a_homer * Q_d^(1-a_homer)
}
u_ned <- function(Q_b, Q_d) {
Q_b^a_ned * Q_d^(1-a_ned)
}
e_homer = c(5, 5)
e_ned = c(5, 5)
ic_homer <- function(Q_b) {
(u_homer(e_homer[1], e_homer[2])/Q_b^a_homer)^(1/(1-a_homer))
}
ic_ned <- function(Q_b) {
(u_ned(e_ned[1], e_ned[2])/Q_b^a_ned)^(1/(1-a_ned))
}
g_homer <- ggplot() +
geom_function(fun = ic_homer) +
geom_point(aes(x = e_homer[1], y = e_homer[2]), color = "blue") +
geom_abline(
slope = -a_homer/(1-a_homer),
intercept = 5 + a_homer/(1-a_homer) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_ned <- ggplot() +
geom_function(fun = ic_ned) +
geom_point(aes(x = e_ned[1], y = e_ned[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = 5 + a_ned/(1-a_ned) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
ggarrange(g_homer, g_ned)
g_ned + coord_flip()
g_ned
g_ned + coord_flip()
g_ned + scale_y_reverse()
g_ned + scale_y_reverse() + scale_x_reverse()
g_ned + scale_y_reverse()
g_ned + scale_y_reverse(limits = c(0, 10)) + scale_x_reverse(limits = c(0, 10))
e <- e_homer + e_ned
v_ned <- function(Q_b, Q_d) {
u_ned(e[1] - Q_b, e[2] - Q_d)
}
ic_ned_inv <- function(Q_b) {
(v_ned(e[1] - Q_b, e[2] - Q_d)/Q_b^a_ned)^(1/(1-a_ned))
}
g_ned_inv <- ggplot() +
geom_function(fun = ic_ned_inv) +
geom_point(aes(x = e[1] - e_ned[1], y = e[2] - e_ned[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = (e[2] - e_ned[2]) + a_ned/(1-a_ned) * (e[1] - e_ned[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_ned_inv
e <- e_homer + e_ned
v_ned <- function(Q_b, Q_d) {
u_ned(e[1] - Q_b, e[2] - Q_d)
}
ic_ned_inv <- function(Q_b) {
(v_ned(e)/Q_b^a_ned)^(1/(1-a_ned))
}
g_ned_inv <- ggplot() +
geom_function(fun = ic_ned_inv) +
geom_point(aes(x = e[1] - e_ned[1], y = e[2] - e_ned[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = (e[2] - e_ned[2]) + a_ned/(1-a_ned) * (e[1] - e_ned[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_ned_inv
v_ned(e)
v_ned
e
v_ned(e[1], e[2])
u_ned(e[1], e[2])
u_ned(e[1]-e_homer[1], e[2]-e_homer[2])
v_ned(e[1]-e_homer[1], e[2]-e_homer[2])
e <- e_homer + e_ned
v_ned <- function(Q_b, Q_d) {
u_ned(e[1] - Q_b, e[2] - Q_d)
}
ic_ned_inv <- function(Q_b) {
(v_ned(e[1], e[2])/Q_b^a_ned)^(1/(1-a_ned))
}
g_ned_inv <- ggplot() +
geom_function(fun = ic_ned_inv) +
geom_point(aes(x = e[1], y = e[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = (e[2] - e_ned[2]) + a_ned/(1-a_ned) * (e[1] - e_ned[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_ned_inv
e <- e_homer + e_ned
v_ned <- function(Q_b, Q_d) {
u_ned(e[1] - Q_b, e[2] - Q_d)
}
ic_ned_inv <- function(Q_b) {
e[2] - (v_ned(e[1], e[2])/Q_b^a_ned)^(1/(1-a_ned))
}
g_ned_inv <- ggplot() +
geom_function(fun = ic_ned_inv) +
geom_point(aes(x = e[1], y = e[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = (e[2] - e_ned[2]) + a_ned/(1-a_ned) * (e[1] - e_ned[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_ned_inv
ic_ned_inv <- function(Q_b) {
e[2] - (v_ned(e[1], e[2])/(e[1]-Q_b)^a_ned)^(1/(1-a_ned))
}
g_ned_inv <- ggplot() +
geom_function(fun = ic_ned_inv) +
geom_point(aes(x = e[1], y = e[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = (e[2] - e_ned[2]) + a_ned/(1-a_ned) * (e[1] - e_ned[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_ned_inv
e
ic_ned_inv <- function(Q_b) {
e[2] - (v_ned(e_ned[1], e_ned[2])/(e[1]-Q_b)^a_ned)^(1/(1-a_ned))
}
g_ned_inv <- ggplot() +
geom_function(fun = ic_ned_inv) +
geom_point(aes(x = e_homer[1], y = e_homer[2]), color = "blue") +
geom_abline(
slope = -a_ned/(1-a_ned),
intercept = (e[2] - e_ned[2]) + a_ned/(1-a_ned) * (e[1] - e_ned[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_ned_inv
g_ned_inv + g_homer
g_homer
box <- g_ned_inv +
geom_function(fun = ic_homer) +
geom_abline(
slope = -a_homer/(1-a_homer),
intercept = 5 + a_homer/(1-a_homer) * 5,
color = "red"
)
box
library(ggplot2)
a_H = 0.05
a_F = 0.75
u_H <- function(Q_b, Q_d) {
Q_b^a_H * Q_d^(1-a_H)
}
u_F <- function(Q_b, Q_d) {
Q_b^a_F * Q_d^(1-a_F)
}
e_H = c(5, 5)
e_F = c(5, 5)
ic_H <- function(Q_b) {
(u_H(e_H[1], e_H[2])/Q_b^a_H)^(1/(1-a_H))
}
ic_F <- function(Q_b) {
(u_F(e_F[1], e_F[2])/Q_b^a_F)^(1/(1-a_F))
}
g_H <- ggplot() +
geom_function(fun = ic_H) +
geom_point(aes(x = e_H[1], y = e_H[2]), color = "blue") +
geom_abline(
slope = -a_H/(1-a_H),
intercept = 5 + a_H/(1-a_H) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_F <- ggplot() +
geom_function(fun = ic_F) +
geom_point(aes(x = e_F[1], y = e_F[2]), color = "blue") +
geom_abline(
slope = -a_F/(1-a_F),
intercept = 5 + a_F/(1-a_F) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_H
g_F
library(ggplot2)
a_H = 0.05
a_F = 0.75
u_H <- function(Q_b, Q_d) {
Q_b^a_H * Q_d^(1-a_H)
}
u_F <- function(Q_b, Q_d) {
Q_b^a_F * Q_d^(1-a_F)
}
e_H = c(5, 5)
e_F = c(5, 5)
ic_H <- function(Q_b) {
(u_H(e_H[1], e_H[2])/Q_b^a_H)^(1/(1-a_H))
}
ic_F <- function(Q_b) {
(u_F(e_F[1], e_F[2])/Q_b^a_F)^(1/(1-a_F))
}
g_H <- ggplot() +
geom_function(fun = ic_H) +
geom_point(aes(x = e_H[1], y = e_H[2]), color = "blue") +
geom_abline(
slope = -a_H/(1-a_H),
intercept = 5 + a_H/(1-a_H) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_F <- ggplot() +
geom_function(fun = ic_F) +
geom_point(aes(x = e_F[1], y = e_F[2]), color = "blue") +
geom_abline(
slope = -a_F/(1-a_F),
intercept = 5 + a_F/(1-a_F) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
e <- e_H + e_F
v_F <- function(Q_b, Q_d) {
u_F(e[1] - Q_b, e[2] - Q_d)
}
ic_F_inv <- function(Q_b) {
e[2] - (v_F(e_H[1], e_H[2])/(e[1]-Q_b)^a_F)^(1/(1-a_F))
}
g_F_inv <- ggplot() +
geom_function(fun = ic_F_inv) +
geom_point(aes(x = e_H[1], y = e_H[2]), color = "blue") +
geom_abline(
slope = -a_F/(1-a_F),
intercept = (e[2] - e_F[2]) + a_F/(1-a_F) * (e[1] - e_F[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Homer's Bibles", y = "Homer's Donuts")
g_F_inv
box <- g_F_inv +
geom_function(fun = ic_H) +
geom_abline(
slope = -a_H/(1-a_H),
intercept = 5 + a_H/(1-a_H) * 5,
color = "red"
)
box
library(MicroWithR)
install.packages(shinytest2)
install.packages('shinytest2')
U <- function(Q_H, Q_F) {
Qb_H = Q_H[1]
Qd_H = Q_H[2]
Qb_F = Q_F[1]
Qd_F = Q_F[2]
u_H = u_H(Qb_H, Qd_H)
u_F = u_F(Qb_F, Qd_F)
c(u_H, u_F)
}
U(c(5,5), c(5,5))
a_H = 0.05
a_F = 0.75
u_H <- function(Q_b, Q_d) {
Q_b^a_H * Q_d^(1-a_H)
}
u_F <- function(Q_b, Q_d) {
Q_b^a_F * Q_d^(1-a_F)
}
e_H = c(5, 5)
e_F = c(5, 5)
U(c(5,5), c(5,5))
u_H(5,5)
u_F(5,5)
library(ggplot2)
a_H = 0.05
a_F = 0.75
u_H <- function(Q_b, Q_d) {
Q_b^a_H * Q_d^(1-a_H)
}
u_F <- function(Q_b, Q_d) {
Q_b^a_F * Q_d^(1-a_F)
}
e_H = c(5, 5)
e_F = c(5, 5)
ic_H <- function(Q_b) {
(u_H(e_H[1], e_H[2])/Q_b^a_H)^(1/(1-a_H))
}
ic_F <- function(Q_b) {
(u_F(e_F[1], e_F[2])/Q_b^a_F)^(1/(1-a_F))
}
bc <- function(Q_H, Q_F, p_b) {
Qb_H = Q_H[1]
Qd_H = Q_H[2]
Qb_F = Q_F[1]
Qd_F = Q_F[2]
bc_H = p_b * Qb_H + Qd_H - (p_b * e_H[1] + e_H[2]) # Homer's budget constraint
bc_F = p_b * Qb_F + Qd_F - (p_b * e_F[1] + e_F[2]) # Flanders' budget constraint
rc = Qb_H + Qb_F  - (e_H + e_F) # resource constraint
c(bc_H, bc_F, rc)
}
result <- rsolnp(
par = c(5, 5, 5, 5, 1), # initial guess
fn = U,
eqfun = bc,
eqB = c(0, 0, 0), # all constraints equal to zero
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf) # upper bounds
)
library(MicroWithR)
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fn = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
Q_F = c(5,5)
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
U
U()
U(Q_H, Q_F)
U(c(5,5), c(5,5))
U <- function(Q_H, Q_F) {
Q_H = c(Q_H[1], Q_H[2])
Q_F = c(Q_F[1], Q_F[2])
Qb_H = Q_H[1]
Qd_H = Q_H[2]
Qb_F = Q_F[1]
Qd_F = Q_F[2]
u_H = u_H(Qb_H, Qd_H)
u_F = u_F(Qb_F, Qd_F)
c(u_H, u_F)
}
bc <- function(Q_H, Q_F, p_b) {
Q_H = c(Q_H[1], Q_H[2])
Q_F = c(Q_F[1], Q_F[2])
Qb_H = Q_H[1]
Qd_H = Q_H[2]
Qb_F = Q_F[1]
Qd_F = Q_F[2]
bc_H = p_b * Qb_H + Qd_H - (p_b * e_H[1] + e_H[2]) # Homer's budget constraint
bc_F = p_b * Qb_F + Qd_F - (p_b * e_F[1] + e_F[2]) # Flanders' budget constraint
rc_b = Qb_H + Qb_F  - (e_H[1] + e_F[1]) # bible endowment constraint
rc_d = Qd_H + Qd_F  - (e_H[2] + e_F[2]) # donut endowment constraint
c(bc_H, bc_F, rc_b, rc_d)
}
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
U <- function(Q) {
Q = c(Q[1], Q[2])
Qb_H = Q[1]
Qd_H = Q[2]
Qb_F = Q[3]
Qd_F = Q[4]
u_H = u_H(Qb_H, Qd_H)
u_F = u_F(Qb_F, Qd_F)
c(u_H, u_F)
}
bc <- function(Q, p_b) {
Q = c(Q[1], Q[2])
Qb_H = Q[1]
Qd_H = Q[2]
Qb_F = Q[3]
Qd_F = Q[4]
bc_H = p_b * Qb_H + Qd_H - (p_b * e_H[1] + e_H[2]) # Homer's budget constraint
bc_F = p_b * Qb_F + Qd_F - (p_b * e_F[1] + e_F[2]) # Flanders' budget constraint
rc_b = Qb_H + Qb_F  - (e_H[1] + e_F[1]) # bible endowment constraint
rc_d = Qd_H + Qd_F  - (e_H[2] + e_F[2]) # donut endowment constraint
c(bc_H, bc_F, rc_b, rc_d)
}
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
flb <- function(x)
{ p <- length(x); sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2) }
f1b
flb
flb(c(1,2,3,4,5))
