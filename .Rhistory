L <- ysym('x1^(alpha) * x2^(1 - alpha) + lambda*(m - p1*x1 - p2*x2)')
dL <- c(deriv(L, 'x1'), deriv(L, 'x2'), deriv(L, 'lambda'))
MU1 <- solve(dL[[1]], 'lambda') |> y_rmvars()*p1
MU2 <- solve(dL[[2]], 'lambda') |> y_rmvars()*p2
MRS <- yac_str(MU1/MU2) |> Simplify() |> ysym()
MRSsolve1 <- solve(MRS - p1/p2, 'x2') |> y_rmvars()
BCsolve1 <- solve(dL[[3]], 'x2') |> y_rmvars()
D1 <- solve(MRSsolve1 - BCsolve1, 'x1') |> y_rmvars() |> yac_str() |>
Simplify() |> ysym()
MRSsolve2 <- solve(MRS - p1/p2, 'x1') |> y_rmvars()
BCsolve2 <- solve(dL[[3]], 'x1') |> y_rmvars()
D2 <- solve(MRSsolve1 - BCsolve1, 'x2') |> y_rmvars() |> yac_str() |>
Simplify() |> ysym()
u0 <- -tail(initialEquilibrium$values, 1)
x0 <- c(initialEquilibrium$pars)
xTilde <- solnp(pars = x0, fun = bcLowP, ineqfun = ux, ineqLB = -Inf,
ineqUB = -u0, LB = c(0, 0), UB = c(Inf, Inf))
# Chunk 2: incomeChangeGraph
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
from = 0,
to = m / p1,
xlim = c(0, (m + dm) / p1),
ylim = c(0, (m + dm) / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$pars[1],
initialEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(dmEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline((m + dm) / p2,-p1 / p2, col = 'red', lty = 'dashed')
points(dmEquilibrium$pars[1],
dmEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(dmEquilibrium2$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline((m - dm) / p2,-p1 / p2, col = 'red', lty = 'dashed')
points(dmEquilibrium2$pars[1],
dmEquilibrium2$pars[2],
col = 'blue',
pch = 20)
arrows(
x0 = 0,
y0 = 0,
x1 = dmEquilibrium$pars[1],
y1 = dmEquilibrium$pars[2]
)
# Chunk 3: incomeChangeGraph-solution
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
from = 0,
to = m / p1,
xlim = c(0, (m + dm) / p1),
ylim = c(0, (m + dm) / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$pars[1],
initialEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(dmEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline((m + dm) / p2,-p1 / p2, col = 'red', lty = 'dashed')
points(dmEquilibrium$pars[1],
dmEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(dmEquilibrium2$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline((m - dm) / p2,-p1 / p2, col = 'red', lty = 'dashed')
points(dmEquilibrium2$pars[1],
dmEquilibrium2$pars[2],
col = 'blue',
pch = 20)
arrows(
x0 = 0,
y0 = 0,
x1 = dmEquilibrium$pars[1],
y1 = dmEquilibrium$pars[2]
)
# Chunk 4: incomeChangeGraph-check
grade_code()
# Chunk 5: cdIncomeChange
# Chunk 6: cdIncomeChange-solution
dm = 5
dmEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bc,
ineqLB = 0,
ineqUB = m + dm,
LB = c(0, 0),
UB = c(Inf, Inf)
)
initialEquilibrium[c(1, 3)]
dmEquilibrium[c(1, 3)]
# Chunk 7: cdIncomeChange-check
grade_code()
# Chunk 8: cdEngel
# Chunk 9: cdEngel-solution
curve(
alpha * x / p1,
from = 0,
to = 150,
xlab = expression("Income"),
ylab = expression(x[1])
)
# Chunk 10: cdEngel-check
grade_code()
# Chunk 11: nonlinearIEP
m4 = seq(60, 120, 20)
complements <- function(x) {
- min(x[1] ^ 2, 25 * x[2])
}
nonlinearIEPEquilibrium060m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[1],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium080m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[2],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium100m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[3],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium120m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[4],
LB = c(0,0),
UB = c(Inf, Inf)
)
par(mfrow = c(1, 3))
plot(
x = rep(nonlinearIEPEquilibrium060m$pars[1], 10),
y = seq(nonlinearIEPEquilibrium060m$pars[2], 120, length.out = 10),
type = 'l',
col = 'dark green',
xlim = c(0, m4[4] / p1),
ylim = c(0, m4[4] / p2),
xlab = expression(x[1]),
ylab = expression(x[2])
)
segments(
x0 = nonlinearIEPEquilibrium060m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium060m$pars[2],
y1 = nonlinearIEPEquilibrium060m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = nonlinearIEPEquilibrium080m$pars[1],
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = nonlinearIEPEquilibrium080m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = nonlinearIEPEquilibrium100m$pars[1],
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = nonlinearIEPEquilibrium100m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = nonlinearIEPEquilibrium120m$pars[1],
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = nonlinearIEPEquilibrium120m$pars[2],
col = 'dark green'
)
abline(100 / p2,-p1 / p2, col = 'red')
curve(x ^ 2 / 25, add = TRUE)
curve(
p2 * x ^ 2 / 25 + p1 * x,
xlim = c(0, nonlinearIEPEquilibrium120m$pars[1]),
ylim = c(0, m4[4]),
xlab = expression(x[1]),
ylab = 'Income'
)
curve(
p2 * x + 5 * p1 * sqrt(x),
xlim = c(0, nonlinearIEPEquilibrium120m$pars[2]),
ylim = c(0, m4[4]),
xlab = expression(x[2]),
ylab = 'Income'
)
par(mfrow = c(1,1))
dp1 = 0.5
bcLowP  <- function(x) (p1 - dp1) * x[1] + p2 * x[2]
bcHighP <- function(x) (p1 + dp1) * x[1] + p2 * x[2]
lowPEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bcLowP,
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)
highPEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bcHighP,
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
from = 0,
to = m / p1,
xlim = c(0, m / (p1 - dp1)),
ylim = c(0, m / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$pars[1],
initialEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(lowPEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 - dp1) / p2, col = 'red', lty = 'dashed')
points(lowPEquilibrium$values$pars[1],
lowPEquilibrium$values$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(highPEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 + dp1) / p2, col = 'red', lty = 'dashed')
points(highPEquilibrium$pars[1],
highPEquilibrium$pars[2],
col = 'blue',
pch = 20)
abline(m / p2,-p1 / p2, col = 'red', from = 0, to = m/p1)
dp1 = 0.5
lowpriceEquilibrium <-
constrOptim(
c(0.01, 0.01),
u,
NULL,
ui = c(-(p1 - dp1),-p2),
ci = c(-m),
control = list(fnscale = -1)
)
highpriceEquilibrium <-
constrOptim(
c(0.01, 0.01),
u,
NULL,
ui = c(-(p1 + dp1),-p2),
ci = c(-m),
control = list(fnscale = -1)
)
curve(
initialEquilibrium$value ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
from = 0,
to = m / p1,
xlim = c(0, m / (p1 - dp1)),
ylim = c(0, m / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$par[1],
initialEquilibrium$par[2],
col = 'blue',
pch = 20)
curve(
lowpriceEquilibrium$value ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 - dp1) / p2, col = 'red', lty = 'dashed')
points(lowpriceEquilibrium$par[1],
lowpriceEquilibrium$par[2],
col = 'blue',
pch = 20)
curve(
highpriceEquilibrium$value ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 + dp1) / p2, col = 'red', lty = 'dashed')
points(highpriceEquilibrium$par[1],
highpriceEquilibrium$par[2],
col = 'blue',
pch = 20)
dp1 = 0.5
bcLowP  <- function(x) (p1 - dp1) * x[1] + p2 * x[2]
bcHighP <- function(x) (p1 + dp1) * x[1] + p2 * x[2]
lowPEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bcLowP,
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)
highPEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bcHighP,
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
from = 0,
to = m / p1,
xlim = c(0, m / (p1 - dp1)),
ylim = c(0, m / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$pars[1],
initialEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(lowPEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 - dp1) / p2, col = 'red', lty = 'dashed')
points(lowPEquilibrium$values$pars[1],
lowPEquilibrium$values$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(highPEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 + dp1) / p2, col = 'red', lty = 'dashed')
points(highPEquilibrium$pars[1],
highPEquilibrium$pars[2],
col = 'blue',
pch = 20)
dp1 = 0.5
bcLowP  <- function(x) (p1 - dp1) * x[1] + p2 * x[2]
bcHighP <- function(x) (p1 + dp1) * x[1] + p2 * x[2]
lowPEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bcLowP,
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)
highPEquilibrium <-
solnp(
c(1, 1),
ux,
ineqfun = bcHighP,
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)
curve(
(-tail(initialEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
from = 0,
to = m / p1,
xlim = c(0, m / (p1 - dp1)),
ylim = c(0, m / p2),
xlab = expression(x[1]),
ylab = expression(x[2]),
col = 'dark green'
)
abline(m / p2,-p1 / p2, col = 'red')
points(initialEquilibrium$pars[1],
initialEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(lowPEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 - dp1) / p2, col = 'red', lty = 'dashed')
points(lowPEquilibrium$pars[1],
lowPEquilibrium$pars[2],
col = 'blue',
pch = 20)
curve(
(-tail(highPEquilibrium$values, 1)) ^ (1 / (1 - alpha)) / (x ^ (alpha / (1 - alpha))),
add = TRUE,
col = 'dark green',
lty = 'dashed'
)
abline(m / p2,-(p1 + dp1) / p2, col = 'red', lty = 'dashed')
points(highPEquilibrium$pars[1],
highPEquilibrium$pars[2],
col = 'blue',
pch = 20)
SE <- ysym('(y - b[1] - b[2]*x)^2')
library(Ryacas)
pch = 20)
SE <- ysym('(y - b[1] - b[2]*x)^2')
deriv(SE, b)
SE <- ysym('(y - b0 - b1*x)^2')
deriv(SE, b0)
deriv(SE, 'b0')
solve(deriv(SE, 'b0'))
solve(deriv(SE, 'b0'), b0)
solve(deriv(SE, 'b0'), 'b0')
solve(deriv(SE, 'b1'), 'b1')
SSE <- ysym('y - X%*%b')
solve(deriv(SE, 'b'), 'b')
SSE <- ysym('t(y - X%*%b)%*%(y - X%*%b)')
solve(deriv(SSE, 'b'), 'b')
deriv(SSE, 'b')
library(knitr)
