qStar[2] |>
y_rmvars()|>
as_r()
solve(dprofit, 'Q')[1] |>
y_rmvars() |>
as_r()
par(mfrow = c(2,2))                                                   # Set a 2-by-2 plot window.
curve(
0.05 * x ^ 3 - 0.9 * x ^ 2 + 10 * x + 5,                            # Total cost curve
col = 'red',         # Line color
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$"           # Y-axis label
)
curve(7 * x, col = 'blue', add = TRUE)                                # Total revenue curve
curve(7 * x - 5, lty = 'dashed')                                      # MR = MC reference line
curve(
7 * x - (0.05 * x ^ 3 - 0.9 * x ^ 2 + 10 * x + 5),                  # Total profit curve
col = 'black',
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$",          # Y-axis label
ylim = c(-10, 10)    # Y-axis range
)
lines(x = c(0, 15),                                                   # Zero-profit reference line
y = c(0, 0),
lty = 'dashed')  # Line type
curve(
0.15 * x ^ 2 - 1.8 * x + 10,                                        # Marginal cost curve
col = 'red',         # Line color
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$",          # Y-axis label
ylim = c(0, 12.5)    # Y-axis range
)
curve(0.05 * x ^ 2 - 0.9 * x + 10 + 5 / x, col = 'brown', add = TRUE) # Average total cost curve
curve(0.05 * x ^ 2 - 0.9 * x + 10,                                    # Average variable cost curve
col = 'brown',   # Line color
add = TRUE,
lty = 'dashed')  # Line type
lines(x = c(0, 15),                                                   # Average/marginal revenue curve (price)
y = c(7, 7),
col = 'blue')
lines(x = c(0, 15),                                                   # Shutdown reference line
y = c(5.95, 5.95),
lty = 'dashed')
curve(
7 - (0.15 * x ^ 2 - 1.8 * x + 10),                                  # Marginal profit curve
col = 'black',
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$",          # Y-axis label
ylim = c(-10, 10)    # Y-axis range
)
lines(x = c(0, 15),                                                   # d(Profit) = 0 reference line
y = c(0, 0),
lty = 'dashed')  # Line type
par(mfrow = c(2,2))                                                   # Set a 2-by-2 plot window.
curve(
0.05 * x ^ 3 - 0.9 * x ^ 2 + 10 * x + 5,                            # Total cost curve
col = 'red',         # Line color
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$"           # Y-axis label
)
curve(7 * x, col = 'blue', add = TRUE)                                # Total revenue curve
curve(7 * x - 5, lty = 'dashed', add = TRUE)                          # MR = MC reference line
curve(
7 * x - (0.05 * x ^ 3 - 0.9 * x ^ 2 + 10 * x + 5),                  # Total profit curve
col = 'black',
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$",          # Y-axis label
ylim = c(-10, 10)    # Y-axis range
)
lines(x = c(0, 15),                                                   # Zero-profit reference line
y = c(0, 0),
lty = 'dashed')  # Line type
curve(
0.15 * x ^ 2 - 1.8 * x + 10,                                        # Marginal cost curve
col = 'red',         # Line color
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$",          # Y-axis label
ylim = c(0, 12.5)    # Y-axis range
)
curve(0.05 * x ^ 2 - 0.9 * x + 10 + 5 / x, col = 'brown', add = TRUE) # Average total cost curve
curve(0.05 * x ^ 2 - 0.9 * x + 10,                                    # Average variable cost curve
col = 'brown',   # Line color
add = TRUE,
lty = 'dashed')  # Line type
lines(x = c(0, 15),                                                   # Average/marginal revenue curve (price)
y = c(7, 7),
col = 'blue')
lines(x = c(0, 15),                                                   # Shutdown reference line
y = c(5.95, 5.95),
lty = 'dashed')
curve(
7 - (0.15 * x ^ 2 - 1.8 * x + 10),                                  # Marginal profit curve
col = 'black',
from = 0,            # Starting x value
to = 15,             # Ending x value
xlab = "Quantity",   # X-axis label
ylab = "$",          # Y-axis label
ylim = c(-10, 10)    # Y-axis range
)
lines(x = c(0, 15),                                                   # d(Profit) = 0 reference line
y = c(0, 0),
lty = 'dashed')  # Line type
profit  <- ysym('7*Q - (0.05*Q^3 - 0.9*Q^2 + 10*Q + 5)')
dprofit <- deriv(profit, 'Q') |>
simplify()
qStar   <- solve(dprofit, 'Q')[2] |>
y_rmvars() |>
as_r()
qStar
qStar == 10
tex(dprofit)
library(Rsolnp)
solution <- solnp(
pars = c(1,1),
fun = - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
library(Rsolnp)
solution <- solnp(
pars = 1,
fun = - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
library(Rsolnp)
solution <- solnp(
pars = 1,
fun = function(x) - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
solution
library(Rsolnp)
solution <- solnp(
pars = 5,
fun = function(x) - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
solution
library(Rsolnp)
solution <- solnp(
pars = 2,
fun = function(x) - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
solution
library(Rsolnp)
solution <- solnp(
pars = 3,
fun = function(x) - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
solution
solution$pars == 10
solution$pars
solution$pars = 10
library(Rsolnp)
solution <- solnp(
pars = 3,
fun = function(x) - (7*x - (0.05*x^3 - 0.9*x^2 + 10*x + 5)),  # Solnp calculates minima so we want to minimize loss
LB = 0
)
solution$pars
solution$pars == 10
round(solution$pars) == 10
pak::pkg_install('bangecon/MicroWithR')
library(MicroWithR)
available_tutorials("MicroWithR")
run_tutorial('0_Introduction', package = "MicroWithR")
library(Rsolnp)
w = 1
r = 4
p = 2
A = 10
a = 0.25
loss <- function(x) {w*x[1] + r*x[2] - p*A*(x[1]^a * x[2]^(1-a))}
solnp(pars = c(1,1), fun = loss, LB = c(0,0))
solnp(pars = c(1,1), fun = loss, LB = c(0,0))
w = 1
r = 3
p = 2
A = 10
a = 0.25
loss <- function(x) {w*x[1] + r*x[2] - p*A*(x[1]^a * x[2]^(1-a))}
solnp(pars = c(1,1), fun = loss, LB = c(0,0))
solnp(pars = c(1,1), fun = loss, LB = c(0,0))
w = 1
r = 3
p = 2
A = 10
a = 0.24
b = 0.72
loss <- function(x) {w*x[1] + r*x[2] - p*A*(x[1]^a * x[2]^b)}
solnp(pars = c(1,1), fun = loss, LB = c(0,0))
solnp(pars = c(0.01,0.01), fun = loss, LB = c(0,0))
solnp(pars = c(0.05,0.05), fun = loss, LB = c(0,0))
1120285126/1298569239
solnp(pars = c(0.005,0.005), fun = loss, LB = c(0,0))
w = 1
r = 3
p = 1
A = 1
a = 0.24
b = 0.72
loss <- function(x) {w*x[1] + r*x[2] - p*A*(x[1]^a * x[2]^b)}
solnp(pars = c(1,1), fun = loss, LB = c(0,0))
w = 1
r = 3
p = 1
A = 1
a = 0.24
b = 0.72
loss <- function(x) {w*x[1] + r*x[2] - p*A*(x[1]^a * x[2]^b)}
solnp(pars = c(0.01,0.01), fun = loss, LB = c(0,0))
Sys.Date()
?Sys.Date
shiny::runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
gsub("-", "", Sys.Date()
)
numeric(gsub("-", "", Sys.Date()))
noquote(gsub("-", "", Sys.Date()))
class(noquote(gsub("-", "", Sys.Date())))
as.numeric(gsub("-", "", Sys.Date()))
runApp('inst/shiny-examples')
input$seed <- as.numeric(gsub("-", "", Sys.Date()))
input <- NULL
input$seed <- as.numeric(gsub("-", "", Sys.Date()))
input$sheet <- '1i_hJiSk-TOfqtNOtm7ZUUcJe1gEZSPwowEd5VZlHFNo'
library(shiny)
library(tidyr)
library(stringr)
library(googlesheets4)
set.seed(input$seed)
roster <- read_sheet(input$sheet)
googlesheets4::gs4_deauth()
set.seed(input$seed)
roster <- read_sheet(input$sheet)
winner <- sample(roster, 1)
winner
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
as.integer(gsub("-", "", Sys.Date()))
class(as.integer(gsub("-", "", Sys.Date())))
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
library(Rcpp)
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
class(winner)
class(as.character(winner))
as.character(winner)
winner
unlist(winner)
winner[[1]]
winner[[2]]
length(winner)
as.data.frame(winner)
names(winner)
sheet <- input$sheet
g <- as.data.frame(read_sheet(sheet))
g
sheet <- input$sheet
g <- as.data.frame(read_sheet(sheet))
g
sample(g,1)
sample(g)
sample(as.vector(g))
sample(as.vector(g), 1)
c(g)
v = c(1:10)
sample(v, 1)
sample(v, 1)
class(v)
v = c(rnorm(10))
sample(v, 1)
class(v)
v = c("Bob", "John", "Tom", "Jane", "Mary")
sample(v, 1)
class(v)
class(g)
as.character(g)
length(as.character(g))
length(character(g))
v = data.frame(Name = "Bob", "John", "Tom", "Jane", "Mary")
v
v = data.frame(Name = c("Bob", "John", "Tom", "Jane", "Mary"))
v
sample(v, 1)
sample(v[1], 1)
sample(v[,1], 1)
class(v[,1])
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
runApp('inst/shiny-examples')
pak::pkg_install('bangecon/MicroWithR')
library(MicroWithR)
runRandomPresenterApp
runRandomPresenterApp()
devtools::document()
pak::pkg_install('bangecon/MicroWithR')
library(MicroWithR)
runApp(system.file("shiny-examples", "randomPresenterApp", package = "MicroWithR"))
runApp(system.file("shiny-examples", "randomPresenterApp", package = "MicroWithR"))
runApp('inst/shiny-examples/randomPresenterApp')
runApp('inst/shiny-examples/randomPresenterApp')
runApp('inst/shiny-examples/randomPresenterApp')
runApp('inst/shiny-examples/randomPresenterApp')
system.file("rmarkdown/templates/tutorial/resources/tutorial-format.htm",
package = "learnr")
View(system.file("rmarkdown/templates/tutorial/resources/tutorial-format.htm",
package = "learnr"))
Sys.Date(
)
format(Sys.time(), "%a %b %d %X %Y")
run_tutorial('0_Introduction', package = "MicroWithR")
library(nleqslv)
market <- function(x) {
supply <- x[1]^2 - x[2]
demand <- 10/x[1] - x[2]
return(c(supply, demand))
}
(equilibrium <- nleqslv(c(2,2), market)$x)
curve(10/x,
from = 0 ,
to = 5,
col = 'blue',
ylim = c(0, 10))
curve(x^2, col = 'darkorange', add = TRUE)
segments(x0 = 0, y0 = equilibrium$x[2], x1 = equilibrium$x[1], y1 = equilibrium$x[2])
library(nleqslv)
market <- function(x) {
supply <- x[1]^2 - x[2]
demand <- 10/x[1] - x[2]
return(c(supply, demand))
}
(equilibrium <- nleqslv(c(2,2), market)$x)
curve(10/x,
from = 0 ,
to = 5,
col = 'blue',
ylim = c(0, 10))
curve(x^2, col = 'darkorange', add = TRUE)
segments(x0 = 0, y0 = equilibrium[2], x1 = equilibrium[1], y1 = equilibrium[2])
segments(x0 = equilibrium[1], y0 = 0, x1 = equilibrium[1], y1 = equilibrium[2])
library(Ryacas)
demandInverse <- ysym('10/Q')
supplyInverse <- ysym('Q^2')
Qstar <- solve(demandInverse, supplyInverse, 'Q')[[1]] |>
y_rmvars()
Pstar <- with_value(demandInverse, 'Q', Qstar)
library(nleqslv)
market <- function(x) {
supply <- x[1]^2 - x[2]
demand <- 10/x[1] - x[2]
return(c(supply, demand))
}
equilibrium <- nleqslv(c(2,2), market)$x
curve(10/x,
from = 0 ,
to = 5,
col = 'blue',
ylim = c(0, 10))
curve(x^2, col = 'darkorange', add = TRUE)
segments(x0 = 0, y0 = equilibrium[2], x1 = equilibrium[1], y1 = equilibrium[2])
segments(x0 = equilibrium[1], y0 = 0, x1 = equilibrium[1], y1 = equilibrium[2])
library(Ryacas)
demandInverse <- ysym('10/Q')
supplyInverse <- ysym('Q^2')
Qstar <- solve(demandInverse, supplyInverse, 'Q')[[1]] |>
y_rmvars()
Pstar <- with_value(demandInverse, 'Q', Qstar)
curve(10/x,
from = 0 ,
to = 5,
col = 'blue',
ylim = c(0, 10),
xlab = 'Quantity',
ylab = 'Price')
curve(x^2, col = 'darkorange', add = TRUE)
segments(x0 = 0, y0 = equilibrium[2], x1 = equilibrium[1], y1 = equilibrium[2])
segments(x0 = equilibrium[1], y0 = 0, x1 = equilibrium[1], y1 = equilibrium[2])
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = 'center')
library(nleqslv)
market <- function(x) {
supply <- x[1] ^ 2 - x[2]
demand <- 10 / x[1] - x[2]
return(c(supply, demand))
}
equilibrium <- nleqslv(c(2, 2), market)$x
curve(10/x,
from = 0 ,
to = 5,
col = 'blue',
ylim = c(0, 10),
xlab = 'Quantity',
ylab = 'Price')
curve(x^2, col = 'darkorange', add = TRUE)
segments(x0 = 0, y0 = equilibrium[2], x1 = equilibrium[1], y1 = equilibrium[2])
segments(x0 = equilibrium[1], y0 = 0, x1 = equilibrium[1], y1 = equilibrium[2])
library(Ryacas)
demandInverse <- ysym('10/Q')
supplyInverse <- ysym('Q^2')
Qstar <- solve(demandInverse, supplyInverse, 'Q')[[1]] |>
y_rmvars()
Pstar <- with_value(demandInverse, 'Q', Qstar)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = 'center')
library(nleqslv)
market <- function(x) {
supply <- x[1] ^ 2 - x[2]
demand <- 10 / x[1] - x[2]
return(c(supply, demand))
}
equilibrium <- nleqslv(c(2, 2), market)$x
curve(10/x,
from = 0 ,
to = 5,
col = 'blue',
ylim = c(0, 10),
xlab = 'Quantity',
ylab = 'Price')
curve(x^2, col = 'darkorange', add = TRUE)
segments(x0 = 0, y0 = equilibrium[2], x1 = equilibrium[1], y1 = equilibrium[2])
segments(x0 = equilibrium[1], y0 = 0, x1 = equilibrium[1], y1 = equilibrium[2])
library(Ryacas)
demandInverse <- ysym('10/Q')
supplyInverse <- ysym('Q^2')
Qstar <- solve(demandInverse, supplyInverse, 'Q')[[1]] |>
y_rmvars()
Pstar <- with_value(demandInverse, 'Q', Qstar)
?persp
u <- ysym('x1^(alpha) * x2^(1-alpha)')
library(MicroWithR)
u <- ysym('x1^(alpha) * x2^(1-alpha)')
library(Ryacas)
u <- ysym('x1^(alpha) * x2^(1-alpha)')
L <- u + ysym('lambda*(m - p1*x1 - p2*x2)')
dL <- deriv(L, c('x1', 'x2', 'lambda'))
MU <- deriv(u, c('x1', 'x2'))
MRS <- yac_str(MU[1]/MU[2]) |>
Simplify() |>
ysym()
library(Deriv)
u <- ysym('x1^(alpha) * x2^(1-alpha)')
L <- u + ysym('lambda*(m - p1*x1 - p2*x2)')
dL <- deriv(L, c('x1', 'x2', 'lambda'))
MU <- deriv(u, c('x1', 'x2'))
MRS <- yac_str(MU[1]/MU[2]) |>
Simplify() |>
ysym()
D <- solve(c(MRS, dL[[3]]), c(ysym('p1/p2'), 0), c('x1', 'x2')) |>
y_rmvars() |>
simplify()
D[1] <- with_value(D[1], 'x2', D[2]) |>
simplify()
D
u <- ysym('x1^(alpha) * x2^(1-alpha)')
L <- u + ysym('lambda*(m - p1*x1 - p2*x2)')
dL <- deriv(L, c('x1', 'x2', 'lambda'))
MU <- deriv(u, c('x1', 'x2'))
MRS <- yac_str(MU[1]/MU[2]) |>
Simplify() |>
ysym()
D <- solve(c(MRS, dL[[3]]), c(ysym('p1/p2'), 0), c('x1', 'x2')) |>
y_rmvars() |>
simplify()
D[1] <- with_value(D[1], 'x2', D[2])
d[2]
D[2]
D <- solve(c(MRS, dL[[3]]), c(ysym('p1/p2'), 0), c('x1', 'x2')) |>
y_rmvars() |>
simplify()
D[2]
u <- ysym('x1^(alpha) * x2^(1-alpha)')
L <- u + ysym('lambda*(m - p1*x1 - p2*x2)')
dL <- deriv(L, c('x1', 'x2', 'lambda'))
MU <- deriv(u, c('x1', 'x2'))
MRS <- yac_str(MU[1]/MU[2]) |>
Simplify() |>
ysym()
D <- solve(c(MRS, dL[[3]]), c(ysym('p1/p2'), 0), c('x1', 'x2')) |>
y_rmvars() |>
simplify()|>
simplify()
D
D[1] <- with_value(D[1], 'x2', D[2])
D
runRandomPresenterApp()
runRandomPresenterApp()
runRandomPresenterApp()
seed = as.integer(gsub("-", "", Sys.Date()))
sheet = '1i_hJiSk-TOfqtNOtm7ZUUcJe1gEZSPwowEd5VZlHFNo'
g <- as.data.frame(read_sheet(sheet))
gs4_deauth()
g <- as.data.frame(read_sheet(sheet))
runRandomPresenterApp()
