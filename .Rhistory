y = seq(nonlinearIEPEquilibrium060m$pars[2], 120, length.out = 10),
type = 'l',
col = 'dark green',
xlim = c(0, m4[4] / p1),
ylim = c(0, m4[4] / p2),
xlab = expression(x[1]),
ylab = expression(x[2])
);
segments(
x0 = nonlinearIEPEquilibrium060m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium060m$pars[2],
y1 = nonlinearIEPEquilibrium060m$pars[2],
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = nonlinearIEPEquilibrium080m$pars[1],
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = 120,
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = nonlinearIEPEquilibrium080m$pars[2],
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = nonlinearIEPEquilibrium100m$pars[1],
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = 120,
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = nonlinearIEPEquilibrium100m$pars[2],
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = nonlinearIEPEquilibrium120m$pars[1],
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = 120,
col = 'dark green'
);
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = nonlinearIEPEquilibrium120m$pars[2],
col = 'dark green'
);
abline(100 / p2,-p1 / p2, col = 'red');
curve(x ^ 2 / 25, add = TRUE);
curve(
p2 * x ^ 2 / 25 + p1 * x,
xlim = c(0, nonlinearIEPEquilibrium120m$pars[1]),
ylim = c(0, m4[4]),
xlab = expression(x[1]),
ylab = 'Income'
);
curve(
p2 * x + 5 * p1 * sqrt(x),
xlim = c(0, nonlinearIEPEquilibrium120m$pars[2]),
ylim = c(0, m4[4]),
xlab = expression(x[2]),
ylab = 'Income'
);
par(mfrow = c(1,1))
m4 = seq(60, 120, 20)
complements <- function(x) {
- min(x[1] ^ 2, 25 * x[2])
}
nonlinearIEPEquilibrium060m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[1],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium080m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[2],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium100m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[3],
LB = c(0,0),
UB = c(Inf, Inf)
)
nonlinearIEPEquilibrium120m <-
solnp(
c(1, 1),
complements,
ineqfun = bc,
ineqLB = 0,
ineqUB = m4[4],
LB = c(0,0),
UB = c(Inf, Inf)
)
par(mfrow = c(1, 3))
plot(
x = rep(nonlinearIEPEquilibrium060m$pars[1], 10),
y = seq(nonlinearIEPEquilibrium060m$pars[2], 120, length.out = 10),
type = 'l',
col = 'dark green',
xlim = c(0, m4[4] / p1),
ylim = c(0, m4[4] / p2),
xlab = expression(x[1]),
ylab = expression(x[2])
)
segments(
x0 = nonlinearIEPEquilibrium060m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium060m$pars[2],
y1 = nonlinearIEPEquilibrium060m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = nonlinearIEPEquilibrium080m$pars[1],
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium080m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium080m$pars[2],
y1 = nonlinearIEPEquilibrium080m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = nonlinearIEPEquilibrium100m$pars[1],
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium100m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium100m$pars[2],
y1 = nonlinearIEPEquilibrium100m$pars[2],
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = nonlinearIEPEquilibrium120m$pars[1],
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = 120,
col = 'dark green'
)
segments(
x0 = nonlinearIEPEquilibrium120m$pars[1],
x1 = 120,
y0 = nonlinearIEPEquilibrium120m$pars[2],
y1 = nonlinearIEPEquilibrium120m$pars[2],
col = 'dark green'
)
abline(100 / p2,-p1 / p2, col = 'red')
curve(x ^ 2 / 25, add = TRUE)
curve(
p2 * x ^ 2 / 25 + p1 * x,
xlim = c(0, nonlinearIEPEquilibrium120m$pars[1]),
ylim = c(0, m4[4]),
xlab = expression(x[1]),
ylab = 'Income'
)
curve(
p2 * x + 5 * p1 * sqrt(x),
xlim = c(0, nonlinearIEPEquilibrium120m$pars[2]),
ylim = c(0, m4[4]),
xlab = expression(x[2]),
ylab = 'Income'
)
par(mfrow = c(1,1))
grade_code()
plot(
initialEquilibrium$pars[1],
p1,
type = 'p',
xlim = c(0, 60),
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
points(lowPEquilibrium$pars[1], p1 - dp1)
points(highPEquilibrium$pars[1], p1 + dp1)
grade_code()
plot(
initialEquilibrium$pars[1],
p1,
type = 'p',
xlim = c(0, 60),
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
points(lowPEquilibrium$pars[1], p1 - dp1)
points(highPEquilibrium$pars[1], p1 + dp1)
plot(
initialEquilibrium$pars[1],
p1,
type = 'p',
xlim = c(0, 60),
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
points(lowPEquilibrium$pars[1], p1 - dp1)
points(highPEquilibrium$pars[1], p1 + dp1)
segments(
x0 = initialEquilibrium$pars[1],
y0 = p1,
x1 = lowPEquilibrium$pars[1],
y1 = p1 - dp1
)
segments(
x0 = initialEquilibrium$pars[1],
y0 = p1,
x1 = highPEquilibrium$pars[1],
y1 = p1 + dp1
)
grade_code()
p1seq <- seq(0.5, 2.5, 0.1)
c1 <- NULL
for (i in 1:length(p1seq)) {
if(i == 1) {
pars <- c(1,1)
} else {
pars <- c
}
c <- solnp(
pars = pars,
ux,
ineqfun = function(x) p1seq[i] * x[1] + p2 * x[2],
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)$pars
c1[i] <- c[1]
}
plot(c1,
p1seq,
type = 'l',
xlim = c(0, 50),
ylim = c(0, 2.5),
xlab = 'Quantity of Good 1',
ylab = 'Price of Good 1')
p1seq <- seq(0.5, 2.5, 0.1)
c1 <- NULL
for (i in 1:length(p1seq)) {
if(i == 1) {
pars <- c(1,1)
} else {
pars <- c
}
c <- solnp(
pars = pars,
ux,
ineqfun = function(x) p1seq[i] * x[1] + p2 * x[2],
ineqLB = 0,
ineqUB = m,
LB = c(0, 0),
UB = c(Inf, Inf)
)$pars
c1[i] <- c[1]
}
plot(c1,
p1seq,
type = 'l',
xlim = c(0, 50),
ylim = c(0, 2.5),
xlab = 'Quantity of Good 1',
ylab = 'Price of Good 1')
grade_code()
curve(
a * m / x,
from = 0,
to = 2.5,
ylim = c(0, 50),
xlab = "Price of Good 1",
ylab = "Quantity of Good 1"
)
curve(
a * m / x,
from = 0,
to = 50,
ylim = c(0, 2.5),
xlab = "Quantity of Good 1",
ylab = "Price of Good 1"
)
grade_code("Samesies!")
library(Rsolnp)
u0 <- -tail(initialEquilibrium$values, 1)
x0 <- initialEquilibrium$pars
xTilde <-
solnp(
pars = x0,
fun = bcLowP,
ineqfun = ux,
ineqLB = -Inf,
ineqUB = -u0,
LB = c(0, 0),
UB = c(Inf, Inf)
)
xTilde
u0 <- -tail(initialEquilibrium$values, 1)
x0 <- initialEquilibrium$pars
xTilde <-
solnp(
pars = x0,
fun = bcLowP,
ineqfun = ux,
ineqLB = -Inf,
ineqUB = -u0,
LB = c(0, 0),
UB = c(Inf, Inf)
)
xTilde
grade_code()
devtools::document()
source("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/R/MicroInvestmentExample.R", echo=TRUE)
devtools::document()
available_tutorials()
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1_ProductionFunctions/2_1_ProductionFunctions.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1_ProductionFunctions/2_1_ProductionFunctions.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/2_1_ProductionFunctions/2_1_ProductionFunctions.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
devtools::document()
rmarkdown::shiny_prerendered_clean("inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
devtools::document()
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization/2_2_CostMinimization.Rmd")
library(shiny)
devtools::document()
devtools::document()
shinytest::recordTest("C:/Users/bange/Desktop/2_2_CostMinimization.Rmd")
rlang::last_trace()
setwd("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_2_CostMinimization")
shinytest::recordTest("C:/Users/bange/Desktop/2_2_CostMinimization.Rmd")
rlang::last_trace()
rmarkdown::shiny_prerendered_clean("C:/Users/bange/Desktop/2_2_CostMinimization.Rmd")
available_tutorials(package = "MicroWithR")
devtools::document()
available_tutorials(package = "MicroWithR")
devtools::document()
available_tutorials(package = "MicroWithR")
pak::pkg_install('bangecon/MicroWithR')
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1_ProductionFunctions/2_1_ProductionFunctions.Rmd")
pak::pkg_install('bangecon/MicroWithR')
available_tutorials(package = "MicroWithR")
library(MicroWithR)
pak::pkg_install('bangecon/MicroWithR')
available_tutorials(package = "MicroWithR")
run_tutorial('2_1_ProductionFunctions', package = "MicroWithR")
MicroWithR
devtools::document()
available_tutorials(package = "MicroWithR")
load("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/.RData")
pak::pkg_install('bangecon/MicroWithR')
source("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/R/runTutorial.R", echo=TRUE)
runTutorial(1, 2)
devtools::document()
runTutorial(1, 2)
pak::pkg_install('bangecon/MicroWithR')
y
runTutorial(1, 2)
library(MicroWithR)
runTutorial(1, 2)
library(MicroWithR)
runTutorial(1, 2)
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_2/1_2.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_2/1_2.Rmd")
tutorial <- paste0("tutorials/", module, "_", lesson)
module = 1; lesson = 3
tutorial <- paste0("tutorials/", module, "_", lesson)
appDir <- system.file(tutorial, package = "MicroWithR")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `MicroWithR`.", call. = FALSE)
}
file = paste0(appDir, "/", module, "_", lesson, ".Rmd")
file
shinytest::recordTest(appDir)
rlang::last_trace()
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
shinytest::recordTest(file)
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
pak::pkg_install('bangecon/MicroWithR')
pak::pkg_install('bangecon/MicroWithR', ask = FALSE)
devtools::document()
recordTutorial(1,4)
rlang::last_trace()
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_4/1_4.Rmd")
recordTutorial(1,4)
recordTutorial(1,4)
rlang::last_trace()
rlang::last_trace(drop = F)
runTutorial(1,4)
??run_tutorial
shinytest::recordTest(file)
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
recordTutorial(file)
recordTutorial(1,3)
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
shinytest::recordTest(file)
tutorial <- paste0("tutorials/", module, "_", lesson)
appDir <- system.file(tutorial, package = "MicroWithR")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `MicroWithR`.", call. = FALSE)
}
file = paste0(appDir, "/", module, "_", lesson, ".Rmd")
shinytest::recordTest(file)
file
runTutorial(1,3)
runTutorial(1,2)
shinytest::recordTest(appDir)
rlang::last_trace()
shinytest::recordTest(appDir)
shinytest::recordTest(appDir)
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
pak::pkg_install('bangecon/MicroWithR', ask = FALSE)
library(MicroWithR)
recordTutorial
pak::pkg_install('bangecon/MicroWithR', ask = FALSE)
View(recordTutorial)
View(MicroWithR::recordTutorial)
MicroWithR::recordTutorial
View(MicroWithR::recordTutorial)
recordTutorial
library(MicroWithR)
recordTutorial
recordTutorial(1,3)
recordTutorial(1,3)
recordTutorial(1,3)
recordTutorial(1,3)
rmarkdown::shiny_prerendered_clean(appDir)
recordTutorial(1,3)
appDir
tutorial <- paste0("tutorials/", module, "_", lesson)
appDir <- system.file(tutorial, package = "MicroWithR")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `MicroWithR`.", call. = FALSE)
}
file = paste0(appDir, "/", module, "_", lesson, ".Rmd")
rmarkdown::shiny_prerendered_clean(appDir)
recordTutorial(1,3)
recordTutorial(1,3)
recordTutorial(1,3)
recordTutorial(1,3)
recordTutorial(1,3)
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
rmarkdown::shiny_prerendered_clean("G:\My Drive\Teaching\IntermediateMicro\MicroWithR\MicroWithR\inst\tutorials\1_3/1_3.Rmd")
rmarkdown::shiny_prerendered_clean("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_3/1_3.Rmd")
recordTutorial(1,3)
runTutorial(1,3)
recordTutorial(1,3)
recordTutorial(1,4)
getOption('shiny.port')
getOption("shiny.launch.browser", interactive())
recordTutorial(1,6)
pak::pkg_install('bangecon/MicroWithR')
pak::pkg_install('bangecon/MicroWithR', ask = F)
pak::pkg_install('bangecon/MicroWithR', ask = F)
recordTutorial(1,3)
library(MicroWithR)
recordTutorial(1,3)
recordTutorial(1,3)
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_2/1_2.Rmd")
rmarkdown::shiny_prerendered_clean("inst/tutorials/1_3/1_3.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 9999999, seed = 8675309)
shinytest::testApp("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 9999999, seed = 8675309)
shinytest::testApp("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd")
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1/2_1.Rmd")
rlang::last_trace()
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/2_1/2_1.Rmd")
shinytest::testApp("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 999999, launch.browser = TRUE)
shinytest::testApp("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 999999, shinyOptions = list(launch.browser = TRUE))
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 999999, shinyOptions = list(launch.browser = TRUE))
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 999999, shinyOptions = list(launch.browser = TRUE))
shinytest::recordTest("G:/My Drive/Teaching/IntermediateMicro/MicroWithR/MicroWithR/inst/tutorials/1_2/1_2.Rmd", loadTimeout = 999999, shinyOptions = list(port = 3298, launch.browser = TRUE))
