ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
Q_F = c(5,5)
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
U
U()
U(Q_H, Q_F)
U(c(5,5), c(5,5))
U <- function(Q_H, Q_F) {
Q_H = c(Q_H[1], Q_H[2])
Q_F = c(Q_F[1], Q_F[2])
Qb_H = Q_H[1]
Qd_H = Q_H[2]
Qb_F = Q_F[1]
Qd_F = Q_F[2]
u_H = u_H(Qb_H, Qd_H)
u_F = u_F(Qb_F, Qd_F)
c(u_H, u_F)
}
bc <- function(Q_H, Q_F, p_b) {
Q_H = c(Q_H[1], Q_H[2])
Q_F = c(Q_F[1], Q_F[2])
Qb_H = Q_H[1]
Qd_H = Q_H[2]
Qb_F = Q_F[1]
Qd_F = Q_F[2]
bc_H = p_b * Qb_H + Qd_H - (p_b * e_H[1] + e_H[2]) # Homer's budget constraint
bc_F = p_b * Qb_F + Qd_F - (p_b * e_F[1] + e_F[2]) # Flanders' budget constraint
rc_b = Qb_H + Qb_F  - (e_H[1] + e_F[1]) # bible endowment constraint
rc_d = Qd_H + Qd_F  - (e_H[2] + e_F[2]) # donut endowment constraint
c(bc_H, bc_F, rc_b, rc_d)
}
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
U <- function(Q) {
Q = c(Q[1], Q[2])
Qb_H = Q[1]
Qd_H = Q[2]
Qb_F = Q[3]
Qd_F = Q[4]
u_H = u_H(Qb_H, Qd_H)
u_F = u_F(Qb_F, Qd_F)
c(u_H, u_F)
}
bc <- function(Q, p_b) {
Q = c(Q[1], Q[2])
Qb_H = Q[1]
Qd_H = Q[2]
Qb_F = Q[3]
Qd_F = Q[4]
bc_H = p_b * Qb_H + Qd_H - (p_b * e_H[1] + e_H[2]) # Homer's budget constraint
bc_F = p_b * Qb_F + Qd_F - (p_b * e_F[1] + e_F[2]) # Flanders' budget constraint
rc_b = Qb_H + Qb_F  - (e_H[1] + e_F[1]) # bible endowment constraint
rc_d = Qd_H + Qd_F  - (e_H[2] + e_F[2]) # donut endowment constraint
c(bc_H, bc_F, rc_b, rc_d)
}
result <- solnp2(
par = c(5, 5, 5, 5, 1), # initial guess
fun = U,
ineqfun = bc,
ineqLB = c(-Inf, -Inf, -10, -10), # lower bounds
ineqUB = c(0, 0, 0, 0), # upper bounds
LB = c(0, 0, 0, 0, 0), # lower bounds
UB = c(10, 10, 10, 10, Inf), # upper bounds
max = TRUE
)
flb <- function(x)
{ p <- length(x); sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2) }
f1b
flb
flb(c(1,2,3,4,5))
library(ggplot2)
ggplot() +
geom_function(
fun = function(x)
- (x - 2)^2 + 4
) +
annotate(
"text",
x = c(0.5, 1, 1.5, 2, 2, 2.5, 3, 3.5),
y = c(3, 4, 5, 2, 5.5, 5, 4, 3),
label = c(
"Mobile Phones",
"Automobiles",
"Housing",
"All of society's land, labor, and capital",
"Health Care",
"Food",
"Machinery",
"Education"
)
) +
geom_segment(aes(
x = 0.75,
y = 2.4375,
xend = 0.6,
yend = 2.8
),
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(aes(
x = 1.25,
y = 3.4375,
xend = 1.1,
yend = 3.8
),
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(aes(
x = 1.65,
y = 3.8775,
xend = 1.5,
yend = 4.8
),
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(aes(
x = 2,
y = 4,
xend = 2,
yend = 5.3
), arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(aes(
x = 2.35,
y = 3.8775,
xend = 2.5,
yend = 4.8
),
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(aes(
x = 2.75,
y = 3.4375,
xend = 2.9,
yend = 3.8
),
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(aes(
x = 3.25,
y = 2.4375,
xend = 3.4,
yend = 2.8
),
arrow = arrow(length = unit(0.1, "inches"))) +
lims(x = c(0, 4), y = c(0, 6)) +
theme(
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()
)
library(ggplot2)
a_H = 0.05
a_F = 0.75
u_H <- function(Q_b, Q_d) {
Q_b^a_H * Q_d^(1-a_H)
}
u_F <- function(Q_b, Q_d) {
Q_b^a_F * Q_d^(1-a_F)
}
e_H = c(5, 5)
e_F = c(5, 5)
ic_H <- function(Q_b) {
(u_H(e_H[1], e_H[2])/Q_b^a_H)^(1/(1-a_H))
}
ic_F <- function(Q_b) {
(u_F(e_F[1], e_F[2])/Q_b^a_F)^(1/(1-a_F))
}
g_H <- ggplot() +
geom_function(fun = ic_H) +
geom_point(aes(x = e_H[1], y = e_H[2]), color = "blue") +
geom_abline(
slope = -a_H/(1-a_H),
intercept = 5 + a_H/(1-a_H) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Beer", y = "Donuts")
g_F <- ggplot() +
geom_function(fun = ic_F) +
geom_point(aes(x = e_F[1], y = e_F[2]), color = "blue") +
geom_abline(
slope = -a_F/(1-a_F),
intercept = 5 + a_F/(1-a_F) * 5,
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Bibles", y = "Donuts")
g_H
g_F
e <- e_H + e_F
v_F <- function(Q_b, Q_d) {
u_F(e[1] - Q_b, e[2] - Q_d)
}
ic_F_inv <- function(Q_b) {
e[2] - (v_F(e_H[1], e_H[2])/(e[1]-Q_b)^a_F)^(1/(1-a_F))
}
g_F_inv <- ggplot() +
geom_function(fun = ic_F_inv) +
geom_point(aes(x = e_H[1], y = e_H[2]), color = "blue") +
geom_abline(
slope = -a_F/(1-a_F),
intercept = (e[2] - e_F[2]) + a_F/(1-a_F) * (e[1] - e_F[1]),
color = "red"
) +
lims(x = c(0, 10), y = c(0, 10)) +
labs(x = "Homer's Bibles", y = "Homer's Donuts")
g_F_inv
box <- g_F_inv +
geom_function(fun = ic_H) +
geom_abline(
slope = -a_H/(1-a_H),
intercept = 5 + a_H/(1-a_H) * 5,
color = "red"
)
box
U_L0 <- function(r_L) {
(2/3)*log(1+0) + (1/3)*log(1000)
}
U_L1 <- function(r_L) {
(2/3)*log(1+1) + (1/3)*log(1000 - r_L)
}
U_C0 <- function(r_C) {
(1/3)*log(1+0) + (2/3)*log(1500)
}
U_C1 <- function(r_C) {
(1/3)*log(1+1) + (2/3)*log(1500 - r_C)
}
# Use nleqslv to solve for Lenny's and Carl's reservation values
library(nleqslv)
r_Lstar <- nleqslv(0, function(r_L) U_L0(r_L) - U_L1(r_L))
r_Lstar
r_Cstar <- nleqslv(0, function(r_C) U_C0(r_C) - U_C1(r_C))
r_Cstar
U_L0 <- function(r_L) {
(1/2)*log(1+0) + (1/2)*log(1000)
}
U_L1 <- function(r_L) {
(1/2)*log(1+1) + (1/2)*log(1000 - r_L)
}
U_C0 <- function(r_C) {
(1/3)*log(1+0) + (2/3)*log(1500)
}
U_C1 <- function(r_C) {
(1/3)*log(1+1) + (2/3)*log(1500 - r_C)
}
# Use nleqslv to solve for Lenny's and Carl's reservation values
library(nleqslv)
r_Lstar <- nleqslv(0, function(r_L) U_L0(r_L) - U_L1(r_L))
r_Lstar
r_Cstar <- nleqslv(0, function(r_C) U_C0(r_C) - U_C1(r_C))
r_Cstar
log(11/15) / log(11/30)
0.5*log(1000)
U_L0 <- function(r_L) {
(1/2)*log(1+0) + (1/2)*log(1000)
}
U_L1 <- function(r_L) {
(1/2)*log(1+1) + (1/2)*log(1000 - r_L)
}
U_C0 <- function(r_C) {
(1/3)*log(1+0) + (2/3)*log(1250)
}
U_C1 <- function(r_C) {
(1/3)*log(1+1) + (2/3)*log(1250 - r_C)
}
# Use nleqslv to solve for Lenny's and Carl's reservation values
library(nleqslv)
r_Lstar <- nleqslv(0, function(r_L) U_L0(r_L) - U_L1(r_L))
r_Lstar
r_Cstar <- nleqslv(0, function(r_C) U_C0(r_C) - U_C1(r_C))
r_Cstar
U_L0 <- function(r_L) {
(1/2)*log(1+0) + (1/2)*log(1000)
}
U_L1 <- function(r_L) {
(1/2)*log(1+1) + (1/2)*log(1000 - r_L)
}
U_C0 <- function(r_C) {
(1/3)*log(1+0) + (2/3)*log(900)
}
U_C1 <- function(r_C) {
(1/3)*log(1+1) + (2/3)*log(900 - r_C)
}
# Use nleqslv to solve for Lenny's and Carl's reservation values
library(nleqslv)
r_Lstar <- nleqslv(0, function(r_L) U_L0(r_L) - U_L1(r_L))
r_Lstar
r_Cstar <- nleqslv(0, function(r_C) U_C0(r_C) - U_C1(r_C))
r_Cstar
7500/175
300/7
library(nleqslv)
library(ggplot2)
W <- function(g_L, g_C) {
U_L <- (1/2)*log(1+1) + (1/2)*log(1000 - g_L)
U_C <- (1/3)*log(1+1) + (2/3)*log(900 - g_C)
W <- U_L + U_C
return(W)
}
spp_star <- nleqslv(c(0,0), function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
}, control = list(maxit = 1000))
library(MicroWithR)
W <- function(g_L, g_C) {
U_L <- (1/2)*log(1+1) + (1/2)*log(1000 - g_L)
U_C <- (1/3)*log(1+1) + (2/3)*log(900 - g_C)
W <- U_L + U_C
return(W)
}
spp_star <- rsolnp2(
c(0,0),
function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
},
LB = c(0, 0),
ineqfun = function(x) {
g_L <- x[1]
g_C <- x[2]
g_L + g_C - 600
},
ineqLB = -600,
ineqUB = 0,
control = list(trace = FALSE)
)
library(MicroWithR)
W <- function(g_L, g_C) {
U_L <- (1/2)*log(1+1) + (1/2)*log(1000 - g_L)
U_C <- (1/3)*log(1+1) + (2/3)*log(900 - g_C)
W <- U_L + U_C
return(W)
}
spp_star <- solnp2(
c(0,0),
function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
},
LB = c(0, 0),
ineqfun = function(x) {
g_L <- x[1]
g_C <- x[2]
g_L + g_C - 600
},
ineqLB = -600,
ineqUB = 0,
control = list(trace = FALSE)
)
spp_star
g_L_spp <- spp_star$x[1]
g_C_spp <- spp_star$x[2]
library(MicroWithR)
W <- function(g_L, g_C) {
U_L <- (1/2)*log(1+1) + (1/2)*log(1000 - g_L)
U_C <- (1/3)*log(1+1) + (2/3)*log(900 - g_C)
W <- U_L + U_C
return(W)
}
spp_star <- solnp2(
c(0,0),
function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
},
LB = c(0, 0),
ineqfun = function(x) {
g_L <- x[1]
g_C <- x[2]
g_L + g_C - 600
},
ineqLB = -600,
ineqUB = 0,
max = TRUE,
control = list(trace = FALSE)
)
spp_star
g_L_spp <- spp_star$x[1]
g_C_spp <- spp_star$x[2]
library(MicroWithR)
W <- function(g_L, g_C) {
U_L <- (1/2)*log(1+1) + (1/2)*log(1000 - g_L)
U_C <- (1/3)*log(1+1) + (2/3)*log(900 - g_C)
W <- U_L + U_C
return(W)
}
spp_star <- solnp2(
c(0,0),
function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
},
LB = c(0, 0),
ineqfun = function(x) {
g_L <- x[1]
g_C <- x[2]
g_L + g_C
},
ineqLB = 600,
ineqUB = Inf,
max = TRUE,
control = list(trace = FALSE)
)
spp_star
g_L_spp <- spp_star$x[1]
g_C_spp <- spp_star$x[2]
library(MicroWithR)
W <- function(g_L, g_C) {
U_L <- (1/2)*log(1+1) + (1/2)*log(1000 - g_L)
U_C <- (1/3)*log(1+1) + (2/3)*log(900 - g_C)
W <- U_L + U_C
return(W)
}
spp_star <- solnp2(
c(1,1),
function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
},
LB = c(0, 0),
ineqfun = function(x) {
g_L <- x[1]
g_C <- x[2]
g_L + g_C
},
ineqLB = 600,
ineqUB = Inf,
max = TRUE,
control = list(trace = FALSE)
)
spp_star
g_L_spp <- spp_star$x[1]
g_C_spp <- spp_star$x[2]
U_L(1, 1000-g_L_spp)
W_L(1000-g_L_spp, 900-g_C_spp)
W(1000-g_L_spp, 900-g_C_spp)
g_L_spp
spp_star$pars
g_L_spp <- spp_star$pars[1]
g_C_spp <- spp_star$pars[2]
W(1000-g_L_spp, 900-g_C_spp)
W(g_L_spp, g_C_spp)
W(0, 0)
U_L0
U_L0(0)
U_L0(0) + U_C0(0)
W
(1/2)*log(1) + (1/2)*log(1000)
(1/3)*log(1) + (2/3)*log(900)
spp_star <- solnp2(
c(1,1),
function(x) {
g_L <- x[1]
g_C <- x[2]
W(g_L, g_C)
},
LB = c(0, 0),
ineqfun = function(x) {
g_L <- x[1]
g_C <- x[2]
g_L + g_C
},
ineqLB = 600,
ineqUB = Inf,
max = TRUE,
control = list(trace = FALSE)
)
spp_star
g_L_spp <- spp_star$pars[1]
g_C_spp <- spp_star$pars[2]
U_L0(0) + U_C0(0)
W(440, 160)
W(445, 155)
0.5*12500 + 0.5*25000
pak::pkg_install('bangecon/MicroWithR')
pak::pkg_install('bangecon/MicroWithR')
pak::pkg_install('bangecon/MicroWithR')
pak::pkg_install('bangecon/MicroWithR')
